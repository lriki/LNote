//=============================================================================
//【 LFGraphics 】
//=============================================================================

#pragma once

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "stdafx.h"
#include "LFStdAfx.h"
#include "LFGraphics.h"

#if 0
//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
LNOTE_FUNC_NAMESPACE_BEGIN

//=============================================================================
// ■ LRenderer
//=============================================================================

//---------------------------------------------------------------------
// 描画開始
//---------------------------------------------------------------------
LNRESULT LRenderer_BeginScene()
{
    return gRenderer->beginScene();
}

//---------------------------------------------------------------------
// 描画終了
//---------------------------------------------------------------------
LNRESULT LRenderer_EndScene()
{
    return gRenderer->endScene();
}

//---------------------------------------------------------------------
// 設定されているカラーバッファ、深度バッファをクリアする
//---------------------------------------------------------------------
LNRESULT LRenderer_Clear( bool target_, bool depth_, u32 color_, lnfloat z_ )
{
    return gRenderer->clear( target_, depth_, color_, z_ );
}

//=============================================================================
// ■ LCanvas
//=============================================================================

//---------------------------------------------------------------------
// デフォルトキャンバスの取得
//---------------------------------------------------------------------
int LCanvas_GetDefaultCanvas()
{
    return LN_TO_INT( gGraphicsDevice->getDefaultCanvas() );
}

//---------------------------------------------------------------------
// キャンバスのサイズを取得する
//---------------------------------------------------------------------
const Geometry::Size& LCanvas_GetSize( int canvas_ )
{
    return LN_INT_TO( Graphics::ICanvas*, canvas_ )->getSize();
}
void LCanvas_GetSizeI( int canvas_, int* w_, int* h_ )
{
    LNFUNC_LSize_TO(
        LN_INT_TO( Graphics::ICanvas*, canvas_ )->getSize(),
        *w_, *h_ );
}

//---------------------------------------------------------------------
// キャンバスサイズを変更する
//---------------------------------------------------------------------
LNRESULT LCanvas_Resize( int canvas_, int width_, int height_ )
{
    return LN_INT_TO( Graphics::ICanvas*, canvas_ )->resize( width_, height_ );
}

//---------------------------------------------------------------------
// 描画先のウィンドウサイズを設定する
//---------------------------------------------------------------------
void LCanvas_SetWindowSize( int canvas_, int width_, int height_ )
{
    LN_INT_TO( Graphics::ICanvas*, canvas_ )->setWindowSize( Geometry::Size( width_, height_ ) );
}

//---------------------------------------------------------------------
// バックバッファの取得
//---------------------------------------------------------------------
int LCanvas_GetBackbuffer( int canvas_ )
{
    return LN_TO_INT( LN_INT_TO( Graphics::ICanvas*, canvas_ )->getBackbuffer() );
}

//---------------------------------------------------------------------
// キャンバスの内容をウィンドウへ転送する
//---------------------------------------------------------------------
LNRESULT LCanvas_Present( int canvas_ )
{
    return LN_INT_TO( Graphics::ICanvas*, canvas_ )->present();
}

//=============================================================================
// ■ LTexture
//=============================================================================
/*
//---------------------------------------------------------------------
// デバイスオブジェクト取得 (必要に応じて IDirect3DTexture9 等にキャストする)
//---------------------------------------------------------------------
void* LTexture_GetDeviceTexture( int texture_ )
{
    return LN_INT_TO( Graphics::ITexture*, texture_ )->getIDirect3DTexture9();
}

//---------------------------------------------------------------------
// デバイスオブジェクト取得 (必要に応じて IDirect3DSurface9 等にキャストする)
//---------------------------------------------------------------------
void* LTexture_GetDeviceSurface( int texture_ )
{
    return LN_INT_TO( Graphics::ITexture*, texture_ )->getIDirect3DSurface9();
}
*/
//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

LNOTE_FUNC_NAMESPACE_END

#endif

//=============================================================================
//                              end of file
//=============================================================================