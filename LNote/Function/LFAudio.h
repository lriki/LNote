//=============================================================================
//【 LFAudio 】
//-----------------------------------------------------------------------------
///**
//  @file       LFAudio.h
//  @brief      LFAudio
//  @author     Riki
//*/
//=============================================================================

#pragma once

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "LFCommon.h"

LNOTE_FUNC_NAMESPACE_BEGIN

//-------------------------------------------------------------------------
/**
@defgroup   group_lib_audio Audio
@{
*/
//-------------------------------------------------------------------------

//=============================================================================
// LAudio
//-----------------------------------------------------------------------------
///**
//  @defgroup   group_laudio LAudio - 音声管理及びゲームオーディオ機能
//  @brief      
//  @{
//*/
//=============================================================================

    //---------------------------------------------------------------------
	///**
    //  @brief      BGM を演奏する
    //  @param[in]  filename   : ファイル名
    //  @param[in]  volume     : ボリューム (0 〜 100)
    //  @param[in]  pitch      : ピッチ (50 〜 200)
    //  @param[in]  fade_time  : フェードインにかける時間 (ミリ秒)
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------[{hsp override=true}]
    HRESULT LAudio_PlayBGM( const TCHAR* filename, int volume = 100, int pitch = 100, int fade_time = 0 );

    //---------------------------------------------------------------------
	///**
    //  @brief      メモリ上の音声データから BGM を演奏する
    //  @param[in]  data        : メモリ上の音声データへのポインタ
    //  @param[in]  data_size   : データサイズ (バイト単位)
    //  @param[in]  volume      : ボリューム (0 〜 100)
    //  @param[in]  pitch       : ピッチ (50 〜 200)
    //  @param[in]  fade_time   : フェードインにかける時間 (ミリ秒)
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
    HRESULT LAudio_PlayBGMMem( const void* data, int data_size, int volume = 100, int pitch = 100, int fade_time = 0 );

    //---------------------------------------------------------------------
	///**
    //  @brief      BGM の演奏を停止する
    //  @param[in]  fade_time : フェードアウトにかける時間 (ミリ秒)
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
	HRESULT LAudio_StopBGM( int fade_time = 0 );

    //---------------------------------------------------------------------
	///**
    //  @brief      BGS を演奏する
    //  @param[in]  filename   : ファイル名
    //  @param[in]  volume     : ボリューム (0 〜 100)
    //  @param[in]  pitch      : ピッチ (50 〜 200)
    //  @param[in]  fade_time  : フェードインにかける時間 (ミリ秒)
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------[{hsp override=true}]
    HRESULT LAudio_PlayBGS( const TCHAR* filename, int volume = 100, int pitch = 100, int fade_time = 0 );

    //---------------------------------------------------------------------
	///**
    //  @brief      メモリ上の音声データから BGS を演奏する
    //  @param[in]  data        : メモリ上の音声データへのポインタ
    //  @param[in]  data_size   : データサイズ (バイト単位)
    //  @param[in]  volume      : ボリューム (0 〜 100)
    //  @param[in]  pitch       : ピッチ (50 〜 200)
    //  @param[in]  fade_time   : フェードインにかける時間 (ミリ秒)
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
    HRESULT LAudio_PlayBGSMem( const void* data, int data_size, int volume = 100, int pitch = 100, int fade_time = 0 );

    //---------------------------------------------------------------------
	///**
    //  @brief      BGS の演奏を停止する
    //  @param[in]  fade_time : フェードアウトにかける時間 (ミリ秒)
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
	HRESULT LAudio_StopBGS( int fade_time = 0 );

    //---------------------------------------------------------------------
	///**
    //  @brief      ME を演奏する
    //  @param[in]  filename   : ファイル名
    //  @param[in]  volume     : ボリューム (0 〜 100)
    //  @param[in]  pitch      : ピッチ (50 〜 200)
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------[{hsp override=true}]
    HRESULT LAudio_PlayME( const TCHAR* filename, int volume = 100, int pitch = 100 );

    //---------------------------------------------------------------------
	///**
    //  @brief      メモリ上の音声データから ME を演奏する
    //  @param[in]  data        : メモリ上の音声データへのポインタ
    //  @param[in]  data_size   : データサイズ (バイト単位)
    //  @param[in]  volume      : ボリューム (0 〜 100)
    //  @param[in]  pitch       : ピッチ (50 〜 200)
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
    HRESULT LAudio_PlayMEMem( const void* data, int data_size, int volume = 100, int pitch = 100 );

    //---------------------------------------------------------------------
	///**
    //  @brief      ME の演奏を停止する
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
	HRESULT LAudio_StopME();

    //---------------------------------------------------------------------
	///**
    //  @brief      SE を演奏する
    //  @param[in]  filename   : ファイル名
    //  @param[in]  volume     : ボリューム (0 〜 100)
    //  @param[in]  pitch      : ピッチ (50 〜 200)
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------[{hsp override=true}]
    HRESULT LAudio_PlaySE( const TCHAR* filename, int volume = 100, int pitch = 100 );

    //---------------------------------------------------------------------
	///**
    //  @brief      SE を演奏する (3D サウンド)
    //  @param[in]  filename    : ファイル名
    //  @param[in]  x, y, z     : 3D 座標
    //  @param[in]  distance    : 減衰距離
    //  @param[in]  volume      : ボリューム (0 〜 100)
    //  @param[in]  pitch       : ピッチ (50 〜 200)
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------[{hsp override=true}]
    HRESULT LAudio_PlaySE3D( const TCHAR* filename, float x, float y, float z, float distance, int volume = 100, int pitch = 100 );

    //---------------------------------------------------------------------
	///**
    //  @brief      メモリ上の音声データから SE を演奏する
    //  @param[in]  data        : メモリ上の音声データへのポインタ
    //  @param[in]  data_size   : データサイズ (バイト単位)
    //  @param[in]  volume      : ボリューム (0 〜 100)
    //  @param[in]  pitch       : ピッチ (50 〜 200)
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
    HRESULT LAudio_PlaySEMem( const void* data, int data_size, int volume = 100, int pitch = 100 );

    //---------------------------------------------------------------------
	///**
    //  @brief      メモリ上の音声データから SE を演奏する (3D サウンド)
    //  @param[in]  data        : メモリ上の音声データへのポインタ
    //  @param[in]  data_size   : データサイズ (バイト単位)
    //  @param[in]  x, y, z     : 3D 座標
    //  @param[in]  distance    : 減衰距離
    //  @param[in]  volume      : ボリューム (0 〜 100)
    //  @param[in]  pitch       : ピッチ (50 〜 200)
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
    HRESULT LAudio_PlaySE3DMem( const void* data, int data_size, float x, float y, float z, float distance, int volume = 100, int pitch = 100 );

    //---------------------------------------------------------------------
	///**
    //  @brief      すべての SE の演奏を停止する
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
	HRESULT LAudio_StopSE();

    //---------------------------------------------------------------------
	///**
    //  @brief      3D 空間の1メートル相当の距離の設定
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
	HRESULT LAudio_SetMetreUnitDistance( float distance );

/** @} */

//=============================================================================
// L3DSoundListener
//-----------------------------------------------------------------------------
///**
//  @defgroup   group_l3dsoundlistener L3DSoundListener - 3D音声リスナー
//  @brief      
//  @{
//*/
//=============================================================================

    //---------------------------------------------------------------------
	///**
    //  @brief      リスナーの位置の設定
    //  @param[in]  x, y, z    : 座標
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
    HRESULT L3DSoundListener_SetPosition( float x, float y, float z );

    //---------------------------------------------------------------------
	///**
    //  @brief      リスナーの正面方向の設定
    //  @param[in]  x, y, z    : 向き
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
    HRESULT L3DSoundListener_SetDirection( float x, float y, float z );

    //---------------------------------------------------------------------
	///**
    //  @brief      リスナーの上方向の設定
    //  @param[in]  x, y, z    : 向き (正面方向とは直交であること)
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
    HRESULT L3DSoundListener_SetUpDirection( float x, float y, float z );

    //---------------------------------------------------------------------
	///**
    //  @brief      リスナーの速度の設定
    //  @param[in]  x, y, z    : 速度
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
    HRESULT L3DSoundListener_Velocity( float x, float y, float z );
    
/** @} */

//=============================================================================
// LSound
//-----------------------------------------------------------------------------
///**
//  @defgroup   group_lsound LSound - 音声機能
//  @brief      
//  @{
//*/
//=============================================================================

    //---------------------------------------------------------------------
	///**
    //  @brief      ファイルから音声を作成する
    //  @param[in]  filename    : ファイル名
    //  @param[in]  enable_3d   : true の場合、3D 音源として作成する
    //  @param[in]  play_type   : 音声の再生方法
    //  @return     サウンドハンドル
    //*/
    //---------------------------------------------------------------------[{hsp disable},{ruby a=1 b=2}]
    LNHandle LSound_Load( const TCHAR* filename, bool enable_3d = false, LNSoundPlayType play_type = LN_SOUNDPLAYTYPE_AUTO );

    //---------------------------------------------------------------------
	///**
    //  @brief      メモリ上のデータから音声を作成する
    //  @param[in]  data        : メモリ上の音声データへのポインタ
    //  @param[in]  data_size   : データサイズ (バイト単位)
    //  @param[in]  enable_3d   : true の場合、3D 音源として作成する
    //  @return     サウンドハンドル
    //*/
    //---------------------------------------------------------------------
    LNHandle LSound_CreateMem( const void* data, int data_size, bool enable_3d = false );

    //---------------------------------------------------------------------
	///**
    //  @brief      ファイルから音声を作成する
    //  @param[out] out_handle  : サウンドハンドルを格納する変数のポインタ
    //  @param[in]  filename    : ファイル名
    //  @param[in]  enable_3d   : true の場合、3D 音源として作成する
    //  @param[in]  play_type   : 音声の再生方法
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------[{hsp name=LSound_Load}]
    HRESULT LSound_LoadToPtr( LNHandle* out_handle, const TCHAR* filename, bool enable_3d = false, LNSoundPlayType play_type = LN_SOUNDPLAYTYPE_AUTO );

    //---------------------------------------------------------------------
	///**
    //  @brief      音声を削除する
    //  @param[in]  sound_handle    : サウンドハンドル
    //*/
    //---------------------------------------------------------------------
    void LSound_Release( LNHandle sound_handle );

    //---------------------------------------------------------------------
	///**
    //  @brief      ボリュームの設定
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @param[in]  volume          : ボリューム (0〜100)
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
    HRESULT LSound_SetVolume( LNHandle sound_handle, int volume );

    //---------------------------------------------------------------------
	///**
    //  @brief      ボリュームの取得
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @return     ボリューム
    //*/
    //---------------------------------------------------------------------
    int LSound_GetVolume( LNHandle sound_handle );

    //---------------------------------------------------------------------
	///**
    //  @brief      ピッチの設定
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @param[in]  pitch           : ピッチ (50〜200)
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
    HRESULT LSound_SetPitch( LNHandle sound_handle, int pitch );

    //---------------------------------------------------------------------
	///**
    //  @brief      ピッチの取得
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @return     ピッチ
    //*/
    //---------------------------------------------------------------------
    int LSound_GetPitch( LNHandle sound_handle );

    //---------------------------------------------------------------------
	///**
    //  @brief      ループ再生の有効設定
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @param[in]  flag            : true = ループ再生する / false = しない
    //  @param[in]  begin           : ループ領域の先頭位置 (サンプル数単位)
    //  @param[in]  length          : ループ領域長さ (サンプル数単位)
    //  @return     リザルトコード
    //  @par
    //              begin と length に 0 を指定すると、全体をループ領域として設定します。
    //*/
    //---------------------------------------------------------------------
    HRESULT LSound_SetLoopState( LNHandle sound_handle, bool loop, int begin = 0, int length = 0 );

    //---------------------------------------------------------------------
	///**
    //  @brief      ループ再生が有効かを調べる
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @return     true = ループ再生する / false = ループ再生しない
    //*/
    //---------------------------------------------------------------------
    bool LSound_IsLoop( LNHandle sound_handle );

    //---------------------------------------------------------------------
	///**
    //  @brief      サウンドの再生状態を取得する
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @return     LN_SOUNDPLAYSTATE_STOP    : 停止中
    //              LN_SOUNDPLAYSTATE_PLAYING : 再生中
    //              LN_SOUNDPLAYSTATE_PAUSING : 一時停止中
    //*/
    //---------------------------------------------------------------------
    LNSoundPlayState LSound_GetPlayState( LNHandle sound_handle );

    //---------------------------------------------------------------------
	///**
    //  @brief      音声を再生する
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
    HRESULT LSound_Play( LNHandle sound_handle );

    //---------------------------------------------------------------------
	///**
    //  @brief      再生を停止する
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
    HRESULT LSound_Stop( LNHandle sound_handle );

    //---------------------------------------------------------------------
    ///**
    //  @brief      一時停止
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @param[in]  pause           : true = 一時停止 / false = 一時停止解除
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
	HRESULT LSound_Pause( LNHandle sound_handle, bool pause );

    //---------------------------------------------------------------------
	///**
    //  @brief      音量のフェード
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @param[in]  target_volume   : 変更先の音量
    //  @param[in]  time            : フェードにかける時間 (ミリ秒)
    //  @param[in]  fade_state      : フェード完了後の動作の指定
    //                              @arg LN_SOUNDFADE_CONTINUE : 継続
    //                              @arg LN_SOUNDFADE_STOP : 停止する
    //                              @arg LN_SOUNDFADE_STOP_RESET : 停止して、音量を元の値に戻す
    //                              @arg LN_SOUNDFADE_PAUSE : 一時停止する
    //                              @arg LN_SOUNDFADE_PAUSE_RESET : 一時停止して、音量を元の値に戻す
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
    HRESULT LSound_FadeVolume( LNHandle sound_handle, int target_volume, int time, LNSoundFadeState fade_state );

    //---------------------------------------------------------------------
	///**
    //  @brief      再生したサンプル数の取得
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @return     再生したサンプル数
    //*/
    //---------------------------------------------------------------------
    int LSound_GetUnitsPlayed( LNHandle sound_handle );

    //---------------------------------------------------------------------
	///**
    //  @brief      音声データ全体のサンプル数の取得
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @return     音声データ全体のサンプル数
    //*/
    //---------------------------------------------------------------------
    int LSound_GetTotalUnits( LNHandle sound_handle );

    //---------------------------------------------------------------------
	///**
    //  @brief      サンプリング周波数の取得
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @return     サンプリング周波数
    //*/
    //---------------------------------------------------------------------
    int LSound_GetUnitsParSecond( LNHandle sound_handle );

    //---------------------------------------------------------------------
    ///**
    //  @brief		3D 音源かを調べる
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @return     true=3D音源 / false=3D音源ではない
    //*/
    //---------------------------------------------------------------------
    bool LSound_Is3DSound( LNHandle sound_handle );

    //---------------------------------------------------------------------
    ///**
    //  @brief		3D 音源としての位置を設定する
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @param[in]  x, y ,z         : 3D 座標
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
    HRESULT LSound_SetEmitterPosition( int sound_handle, float x, float y, float z );

    //---------------------------------------------------------------------
    ///**
    //  @brief		3D 音源としての速度を設定する
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @param[in]  x, y, z         : 速度
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
    HRESULT LSound_SetEmitterVelocity( int sound_handle, float x, float y, float z );

    //---------------------------------------------------------------------
    ///**
    //  @brief		3D 音源の減衰距離 (聴こえなくなる距離) を設定する
    //  @param[in]  sound_handle    : サウンドハンドル
    //  @param[in]  distance        : 距離
    //  @return     リザルトコード
    //*/
    //---------------------------------------------------------------------
    HRESULT LSound_SetEmitterDistance( int sound_handle, float distance );

/** @} */

//-------------------------------------------------------------------------
/** @} */
//-------------------------------------------------------------------------

LNOTE_FUNC_NAMESPACE_END

//=============================================================================
//                              end of file
//=============================================================================