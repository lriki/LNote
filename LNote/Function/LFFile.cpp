//=============================================================================
//【 LFFile 】
//=============================================================================

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "stdafx.h"
#include "LFStdAfx.h"
#include "LFFile.h"
#include "../Core/File/ArchiveMaker.h"

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
LNOTE_FUNC_NAMESPACE_BEGIN

//=============================================================================
// LFile
//=============================================================================

    //---------------------------------------------------------------------
    //
    //---------------------------------------------------------------------
    bool LFile_Exist( const TCHAR* filename )
    {
        return Core::File::isExist( filename );
    }

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
LNOTE_FUNC_NAMESPACE_END

#if 0

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
LNOTE_FUNC_NAMESPACE_BEGIN

//=============================================================================
// ■ LInFile
//=============================================================================

//---------------------------------------------------------------------
// ファイルを開く
//---------------------------------------------------------------------
int LInFile_Open( const lnChar* filename_ )
{
    File::IInFile* file;
    gFramework->getFileManager()->createInFile( &file, filename_ );

    return LN_TO_INT( file );
}

//---------------------------------------------------------------------
// ファイルを閉じる
//---------------------------------------------------------------------
void LInFile_Close( int file_ )
{
    File::IInFile* file = LN_INT_TO( File::IInFile*, file_ );
    LN_SAFE_RELEASE( file );
}

//---------------------------------------------------------------------
// ファイルサイズの取得
//---------------------------------------------------------------------
int LInFile_GetSize( int file_ )
{
    return LN_INT_TO( File::IInFile*, file_ )->getSize();
}

//---------------------------------------------------------------------
// ファイルの内容を全て読み込む
//---------------------------------------------------------------------
bool LInFile_Load( int file_, bool async_ )
{
    LN_INT_TO( File::IInFile*, file_ )->load( async_ );
    return true;
}

//---------------------------------------------------------------------
// load() で読み込まれたデータの取得
//---------------------------------------------------------------------
void* LInFile_GetData( int file_ )
{
    return LN_INT_TO( File::IInFile*, file_ )->getData();
}

//---------------------------------------------------------------------
// 非同期読み込みの完了を判定する
//---------------------------------------------------------------------
bool LInFile_IsLoadFinished( int file_ )
{
    return LN_INT_TO( File::IInFile*, file_ )->isLoadFinished();
}

//---------------------------------------------------------------------
// 読み込みでエラーが発生したかを判定する
//---------------------------------------------------------------------
bool LInFile_IsError( int file_ )
{
    return LN_INT_TO( File::IInFile*, file_ )->isError();
}

//=============================================================================
// ■ ArchiveMaker
//=============================================================================

Core::File::ArchiveMaker gArchiveMaker;

//---------------------------------------------------------------------
//
//---------------------------------------------------------------------
int LArchiveMaker_Open( const lnChar* filename_, const lnChar* key_ )
{
    return gArchiveMaker.open( filename_, key_ );
}

//---------------------------------------------------------------------
//
//---------------------------------------------------------------------
int LArchiveMaker_AddFile( const lnChar* filename_, const lnChar* access_name_ )
{
    return gArchiveMaker.addFile( filename_, access_name_ );
}

//---------------------------------------------------------------------
//
//---------------------------------------------------------------------
void LArchiveMaker_Close()
{
    gArchiveMaker.close();
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

LNOTE_FUNC_NAMESPACE_END

#endif

//=============================================================================
//                              end of file
//=============================================================================