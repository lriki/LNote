//=============================================================================
//【 LFFile 】
//-----------------------------------------------------------------------------
///**
//  @file       LFFile.h
//  @brief      LFFile
//  @author     Riki
//*/
//=============================================================================

#pragma once

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "LFCommon.h"

//-------------------------------------------------------------------------
/**
@defgroup   group_lib_file File
@{
*/
//-------------------------------------------------------------------------
LNOTE_FUNC_NAMESPACE_BEGIN

//=============================================================================
// LFile
//-----------------------------------------------------------------------------
///**
//  @defgroup   group_file LFile - ファイルユーティリティ
//  @brief      
//  @{
//*/
//=============================================================================

    //---------------------------------------------------------------------
    ///**
    //  @brief      ディレクトリ上のファイルの存在を調べる
    //  @param[in]  filename    : ファイル名
    //  @retrun     true=存在する / false=存在しない
    //*/
    //---------------------------------------------------------------------
    bool LFile_Exist( const TCHAR* filename );


//=============================================================================
/** @} */
//=============================================================================

LNOTE_FUNC_NAMESPACE_END
//-------------------------------------------------------------------------
/** @} */
//-------------------------------------------------------------------------

#if 0

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
LNOTE_FUNC_NAMESPACE_BEGIN

///**
//  @defgroup   group_lib_file File
//  @{
//*/
    
//=============================================================================
// ■ LInFile
//-----------------------------------------------------------------------------
///**
//  @defgroup   group_infile LInFile 入力ファイル
//
//  @brief      読み取り用ファイル操作
//  @{
//*/
//=============================================================================

    //---------------------------------------------------------------------
    ///**
    //  @brief      ファイルを開く
    //
    //  @param[in]  filename_  : ファイル名
    //*/
    //---------------------------------------------------------------------
    int LInFile_Open( const lnChar* filename_ );

	//---------------------------------------------------------------------
    ///**
    //  @brief      ファイルを閉じる
    //
    //  @param[in]  file_  : ファイルハンドル
    //*/
    //---------------------------------------------------------------------
    void LInFile_Close( int file_ );

    //---------------------------------------------------------------------
	///**
    //  @brief      ファイルサイズの取得
    //
    //  @param[in]  file_  : ファイルハンドル
    //*/		
    //---------------------------------------------------------------------
    int LInFile_GetSize( int file_ );

    //---------------------------------------------------------------------
	///**
    //  @brief      ファイルの内容を全て読み込む
    //
    //  @param[in]  file_  : ファイルハンドル
    //  @param[in]  async_ : true を渡すと非同期で読み込む
    //
    //  @retval     true  : 成功
    //  @retval     false : 失敗
    //
    //  @par
    //              内部にファイルサイズ分のメモリを確保し、そこにファイルの内容を
    //              全て読み込みます。データにアクセスする場合は LInFile_GetData() を使用してください。<br>
    //              確保されたメモリは LInFile_Close() で解放されます。<br>
    //              <br>
    //              async_ に true を指定して呼び出した(非同期で読み込んだ)場合は 
    //              LInFile_IsLoadFinished() で完了したかを確認してください。<br>
    //              読み込み中にクローズしようとした場合、読み込みが完了するまで待機します。
    //*/		
    //---------------------------------------------------------------------
    bool LInFile_Load( int file_, bool async_ );

    //---------------------------------------------------------------------
	///**
    //  @brief      load() で読み込まれたデータの取得
    //
    //  @param[in]  file_  : ファイルハンドル
    //
    //  @return     読み込まれたデータの先頭ポインタ
    //
    //  @par
    //              返すデータは isLoadFinished() が true を返すまで不定です。
    //              実際に読み込みが開始されるまでは NULL を返します。<br>
    //              <br>
    //              念のため読み込まれたデータの末尾には NULL をセットしています。<br>
    //              そのため、実際に確保されているバッファサイズは getSize() の値 + 1 です。
    //*/		
    //---------------------------------------------------------------------
    void* LInFile_GetData( int file_ );

    //---------------------------------------------------------------------
	///**
    //  @brief      非同期読み込みの完了を判定する
    //
    //  @param[in]  file_  : ファイルハンドル
    //
    //  @retval     true  : 読み込みが完了している
    //  @retval     false : 読み込み中
    //*/		
    //---------------------------------------------------------------------
    bool LInFile_IsLoadFinished( int file_ );

    //---------------------------------------------------------------------
	///**
    //  @brief      読み込みでエラーが発生したかを判定する
    //
    //  @param[in]  file_  : ファイルハンドル
    //
    //  @retval     true  : エラーが発生した
    //  @retval     false : 正常
    //*/		
    //---------------------------------------------------------------------
    bool LInFile_IsError( int file_ );
  
/** @} */

//=============================================================================
// ■ LArchiveMaker
//-----------------------------------------------------------------------------
///**
//  @defgroup   group_archive_maker ArchiveMaker 暗号化アーカイブの作成
//
//  @brief      暗号化アーカイブの作成
//  @{
//*/
//=============================================================================

    //---------------------------------------------------------------------
    ///**
    //  @brief      新規にファイルを開いてアーカイブ作成の準備をする
    //
    //  @param[in]  filename_ : ファイル名 
    //  @param[in]  key_      : 暗号化に使う文字列 (127文字まで)
    //
    //  @retval     1  : 成功
    //  @retval     0  : ファイルを開くことができなかった
    //*/
    //---------------------------------------------------------------------
    int LArchiveMaker_Open( const lnChar* filename_, const lnChar* key_ );

    //---------------------------------------------------------------------
    ///**
    //  @brief		ファイルを追加する
    //
    //  @param[in]  filename_    : 追加するファイルの名前
    //  @param[in]  access_name_ : プログラムからアクセスする時の名前
    //
    //  @retval     1  : 成功
    //  @retval     0  : 失敗
    //
    //  @par
    //              filename_ のファイルをアーカイブに追加します。<br>
    //              access_name_ を指定した場合、ファイルに別名をつけた上で追加します。
    //              Archive クラスの open() によってアーカイブ内のファイルにアクセスする場合、
    //              この名前でアクセスするようにします。<br>
    //              access_name_ を省略した場合は filename_ がそのまま使われます。
    //*/
    //---------------------------------------------------------------------
    int LArchiveMaker_AddFile( const lnChar* filename_, const lnChar* access_name_ );

    //---------------------------------------------------------------------
    ///**
    //  @brief		アーカイブファイルを閉じる
    //*/
    //---------------------------------------------------------------------
    void LArchiveMaker_Close();

/** @} */

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

/** @} */

LNOTE_FUNC_NAMESPACE_END

#endif

//=============================================================================
//                              end of file
//=============================================================================