//=============================================================================
//【 GameScene 】
//-----------------------------------------------------------------------------
///**
//  @file       GameScene.h
//  @brief      GameScene
//  @author     Riki
//*/
//=============================================================================

#pragma once

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "GameSceneManager.h"

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{
namespace Utility
{

//=============================================================================
// ■ GameScene クラス
//-----------------------------------------------------------------------------
///**
//  @brief     タイトル画面、バトル画面等、ひとつのゲームシーンを表すクラスの基底
//*/
//=============================================================================
class GameScene
    : public Core::Base::ReferenceObject
{
public:

    /// コンストラクタ
	GameScene( GameSceneManager* manager_ );

	/// デストラクタ
    virtual ~GameScene() {}

public:

    //---------------------------------------------------------------------
    ///**
    //  @brief      シーン名の取得
    //*/
    //---------------------------------------------------------------------
	virtual const lnChar* getSceneName() { return NULL; }

    //---------------------------------------------------------------------
    ///**
    //  @brief      開始処理
    //*/
    //---------------------------------------------------------------------
	virtual void onStart() {}

    //---------------------------------------------------------------------
    ///**
    //  @brief      フレーム更新
    //*/
    //---------------------------------------------------------------------
	virtual void onUpdate() {}

    //---------------------------------------------------------------------
    ///**
    //  @brief      終了処理
    //*/
    //---------------------------------------------------------------------
	virtual void onTerminate() {}

public:

    //---------------------------------------------------------------------
    ///**
    //  @brief      シーンの変更
    //
    //  @par
    //              不具合防止のため、呼び出したシーンがアクティブではない場合は
    //              変更を行いません。
    //*/
    //---------------------------------------------------------------------
    void changeScene( const lnChar* scene_name_ );

    void changeScene( GameScene* next_scene_ );

    //---------------------------------------------------------------------
    ///**
    //  @brief      シーンの呼び出し
    //
    //  @par
    //              指定したシーンを子シーンとして呼び出します。
    //              元のシーンに戻るには、子シーン側の returnScene() を呼びます。
    //*/
    //---------------------------------------------------------------------
    void callScene( const lnChar* scene_name_ );

    void callScene( GameScene* next_scene_ );

    //---------------------------------------------------------------------
    ///**
    //  @brief      呼び出し元のシーン (親シーン) へ戻る
    //*/
    //---------------------------------------------------------------------
    void returnScene( const lnChar* parent_name_ );

    //---------------------------------------------------------------------
    ///**
    //  @brief      アクティブなシーンかを判定する
    //*/
    //---------------------------------------------------------------------
    bool isActiveScene() const;

    //---------------------------------------------------------------------
    ///**
    //  @brief      親ゲームシーンの取得
    //*/
    //---------------------------------------------------------------------
    GameScene* getParentScene() const { return _lngs.mParent; }


private:

    struct
    {
        GameSceneManager*   mManager;
        GameScene*          mParent;
        bool                mIsActive;  ///< Manager から実行中の場合 true (親の場合も常に true)

    } _lngs;

    friend class GameSceneManager;
};

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace Utility
} // namespace LNote

//=============================================================================
//                              end of file
//=============================================================================