//=============================================================================
//【 LGameAudio 】
//-----------------------------------------------------------------------------
///**
//  @file       LGameAudio.h
//  @brief      LGameAudio
//  @version    1.0
//  @date       2010/10/21
//*/
//=============================================================================

#pragma once

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "../Base/LRefClass.h"
#include "../Math/LMath.h"

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{

//=============================================================================
// ■ LGameAudio クラス
//-----------------------------------------------------------------------------
///**
//	@brief      ゲーム用の音声の演奏を扱うクラス
//*/
//=============================================================================
class LGameAudio
    : public LSingletonRefClass< LGameAudio, Core::Audio::IGameAudio >
{
public:

    /// インスタンスの取得
    static LGameAudio getInstance();

public:

    //---------------------------------------------------------------------
	///**
    //  @brief      BGM の演奏を開始する
    //
    //  @param[in]  filename_  : ファイル名
    //  @param[in]  volume_    : 音量   (  0 〜 100 )
    //  @param[in]  pitch_     : ピッチ ( 50 〜 200 )
    //  @param[in]  fade_time_ : フェードインにかける時間 ( ミリ秒 )
    //
    //  @par
    //              filename_ の音声ファイルを読み込んで BGM として演奏します。 <br>
    //              BGM はひとつだけ演奏することができ、ループ再生します。      <br>
    //              既に BGM が演奏されている場合、それは停止されます。         <br>
    //                                                                          <br>
    //              fade_time_ はフェードインにかける時間です。                 <br>
    //              他の BGM の演奏中にフェードインしようとした場合、           <br>
    //              演奏中の BGM とクロスフェードしながら演奏を開始します。     <br>
    //*/
    //---------------------------------------------------------------------
	void playBGM( const char* filename_, int volume_ = 100, int pitch_ = 100, int fade_time_ = 0 );

    //---------------------------------------------------------------------
	///**
    //  @brief      BGM の演奏を停止する
    //
    //  @param[in]  fade_time_ : フェードアウトにかける時間 ( ミリ秒 )
    //*/
    //---------------------------------------------------------------------
	void stopBGM( int fade_time_ = 0 );

    //---------------------------------------------------------------------
	///**
    //  @brief      BGS ( 環境音 ) の演奏を開始する
    //
    //  @param[in]  filename_  : ファイル名
    //  @param[in]  volume_    : 音量   (  0 〜 100 )
    //  @param[in]  pitch_     : ピッチ ( 50 〜 200 )
    //  @param[in]  fade_time_ : フェードインにかける時間 ( ミリ秒 )
    //
    //  @par
    //              BGM と同じ方法で再生されます。( ひとつだけ演奏、ループ再生 )    <br>
    //              BGS は BGM と同時に演奏することができ、ME ( 効果音楽 ) による   <br>
    //              影響を受けず、常に演奏されます。
    //*/
    //---------------------------------------------------------------------
	void playBGS( const char* filename_, int volume_ = 100, int pitch_ = 100, int fade_time_ = 0 );

    //---------------------------------------------------------------------
	///**
    //  @brief      BGS の演奏を停止する
    //
    //  @param[in]  fade_time_ : フェードアウトにかける時間 ( ミリ秒 )
    //*/
    //---------------------------------------------------------------------
	void stopBGS( int fade_time_ = 0 );

    //---------------------------------------------------------------------
    ///**
    //  @brief      ME ( 効果音楽 ) の演奏を開始する
    //
    //  @param[in]  filename_  : ファイル名
    //  @param[in]  volume_    : 音量   (  0 〜 100 )
    //  @param[in]  pitch_     : ピッチ ( 50 〜 200 )
    //
    //  @par
    //              filename_ の音声ファイルを読み込んで ME として演奏します。      <br>
    //              レベルアップやアイテム取得時のファンファーレ等の演奏に使います。<br>
    //              ME はひとつだけ演奏され、ループ再生はしません。
    //              既に ME が演奏されている場合、それは停止されます。             <br>
    //                                                                              <br>
    //              ME の演奏開始時に BGM が演奏されていた場合は BGM を 
    //              500 ミリ秒かけて一時停止させ、その後に ME の演奏を開始します。  <br>
    //              その場合、ME の演奏終了後に BGM の演奏を再開し、
    //              2000 ミリ秒かけて BGM をフェードインさせます。                  <br>
    //                                                                              <br>
    //              このフェードイン、フェードアウトにかける時間は
    //              setMEFadeState() によって設定することができます。
    //*/
    //---------------------------------------------------------------------
	void playME( const char* filename_, int volume_ = 100, int pitch_ = 100 );

    //---------------------------------------------------------------------
    ///**
    //  @brief      ME の演奏を停止する
    //
    //  @par
    //              BGM の一時停止中に ME を停止した場合は playME() の記述と
    //              同じように BGM をフェードインさせながら再開させます。
    //*/
    //---------------------------------------------------------------------
	void stopME();

    //---------------------------------------------------------------------
	///**
    //  @brief      SE の演奏を開始する
    //
    //  @param[in]  filename_  : ファイル名
    //  @param[in]  volume_    : 音量   (  0 〜 100 )
    //  @param[in]  pitch_     : ピッチ ( 50 〜 200 )
    //
    //  @par
    //              filename_ の音声ファイルを読み込んで SE として演奏します。  <br>
    //              SE は同時に複数再生することができ、同じ音声を演奏した場合は
    //              重ねがけされて演奏されます。                                <br>
    //                                                                          <br>
    //              また、SE は必ずオンメモリで再生されます。
    //*/
    //---------------------------------------------------------------------
	void playSE( const char* filename_, int volume_ = 100, int pitch_ = 100 );

    //---------------------------------------------------------------------
	///**
    //  @brief      SE を 3D 空間上で再生する
    //
    //  @param[in]  filename_  : ファイル名
    //  @param[in]  position_  : 音源の位置
    //  @param[in]  volume_    : 音量   (  0 〜 100 )
    //  @param[in]  pitch_     : ピッチ ( 50 〜 200 )
    //*/
    //---------------------------------------------------------------------
    void playSE( const char* filename_, const LVector3& position_, int volume_ = 100, int pitch_ = 100 );

    //---------------------------------------------------------------------
    ///**
    //  @brief      全ての SE の演奏を停止する
    //*/
    //---------------------------------------------------------------------
	void stopSE();

    //---------------------------------------------------------------------
    ///**
    //  @brief      ME 演奏時の BGM のフェード時間を設定する
    //
    //  @param[in]  begin_ : ME 演奏開始時の BGM のフェードアウト時間 ( ミリ秒 )
    //  @param[in]  end_   : ME 演奏終了後の BGM のフェードイン時間 ( ミリ秒 )
    //
    //  @par
    //              -1 を指定した項目は値を変更しません。
    //*/
    //---------------------------------------------------------------------
    void setMEFadeState( int begin_, int end_ );

    //---------------------------------------------------------------------
    ///**
    //  @brief      3D 音源のリスナー情報を設定する
    //
    //  @param[in]  position_ : リスナーの位置
    //  @param[in]  front_    : リスナーの正面方向
    //
    //  @par
    //              front_ は正規化された値が設定されます。
    //*/
    //---------------------------------------------------------------------
    void setListenerState( const LVector3& position_, const LVector3& front_ );


    //---------------------------------------------------------------------
    ///**
    //  @brief      3D 音源の可聴距離の設定
    //
    //  @param[in]  length_ : 音が聞こえなくなる距離 (デフォルトは 10.0f)
    //*/
    //---------------------------------------------------------------------
    void setListenableDistance( lnfloat length_ );
   
};

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace LNote

//=============================================================================
//                              end of file
//=============================================================================