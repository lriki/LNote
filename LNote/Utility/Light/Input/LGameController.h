//=============================================================================
//【 LGameController 】
//-----------------------------------------------------------------------------
///**
//  @file       LGameController.h
//  @brief      LGameController
//  @version    1.0
//  @date       2010/08/23
//*/
//=============================================================================

#pragma once

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "../../Core/Input/GameController.h"
#include "../Math/LMath.h"

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{

//=============================================================================
// ■ LGameController クラス
//-----------------------------------------------------------------------------
///**
//  @brief      入力をひとつのゲームコントローラとして扱うクラス
//
//  @par
//              キーボード、マウス、ジョイパッドの入力の差異を吸収し、
//              全て同じ方法で入力を受け取るようにするためのクラスです。<br><br>
//              
//              このクラスのインスタンスは LInput::getGameController() から取得します。
//              また、LInput::getGameController( 0 ) で取得できるコントローラ
//              ( いわゆる1Pのコントローラ ) は Accessor::Input グローバル変数
//              からアクセスすることもできます。
//*/
//=============================================================================
class LGameController
    : public LRefClass< LGameController, Core::Input::IGameController >
{
public:
	
    //---------------------------------------------------------------------
    ///**
    //  @brief      キーが現在押されているかを判定する
    //*/
    //---------------------------------------------------------------------
	bool isPress( LNGameControllerButton button_ ) const;

    //---------------------------------------------------------------------
    ///**
    //  @brief      キーが新しく押されたかを判定する
    //*/
    //---------------------------------------------------------------------
	bool isOnTrigger( LNGameControllerButton button_ ) const;

    //---------------------------------------------------------------------
    ///**
    //  @brief      キーが離されたかを判定する
    //*/
    //---------------------------------------------------------------------
	bool isOffTrigger( LNGameControllerButton button_ ) const;

    //---------------------------------------------------------------------
    ///**
    //  @brief      キーが新しく押された & リピート状態を判定する
    //*/
    //---------------------------------------------------------------------
	bool isRepeat( LNGameControllerButton button_ ) const;

    //---------------------------------------------------------------------
	///**
    //  @brief      軸の状態の取得
    //
    //  @param[in]  axis_ : 軸番号 ( 0 〜 3 )
    //*/
    //---------------------------------------------------------------------
	LVector2 getAxisState( int axis_ ) const;

	/// 新しく押された仮想ボタンの取得
	int getPressedButton();

    //---------------------------------------------------------------------
	///**
    //  @brief      新しく押されたボタン番号とデバイスの種類の取得
    //
    //  @param[out] out_type_   : 入力があったデバイスの種類を格納する変数へのポインタ または NULL
    //  @param[out] out_button_ : 入力されたキーあるいはボタン番号を格納する変数へのポインタ または NULL
    //
    //  @retval     true  : キーまたはボタンが押された ( 押された瞬間だけ返します )
    //  @retval     false : なにも押されていない
    //
    //  @par
    //              何かボタンが押された瞬間に true を返し、( isOnTrigger() と同じ動作 ) 
    //              入力があったデバイスの種類を out_type_ に、押されたボタン番号を
    //              out_button_ に格納して返します。
    //              主にキーコンフィグのために使います。<br><br>
    //              
    //              out_type_ が LN_INPUTDEVICE_KEYBOARD の場合、out_button_ は
    //              仮想キーコードです。( LN_KEY_〜、または windows の場合は VK_〜 )<br><br>
    //              
    //              out_type_ が LN_INPUTDEVICE_MOUSE の場合、out_button_ は
    //              マウスのボタン番号です。( LNMouseButton 列挙型の値 )<br><br>
    //              
    //              out_type_ が LN_INPUTDEVICE_JOYPAD の場合、out_button_ は
    //              ジョイパッドのボタン番号です。<br><br>
    //              
    //              キーボードが割り当てられていない場合、キーボードおよび
    //              マウスの判定は行いません。<br><br>
    //              
    //              <br>
    //              デバイスが有効になっていない場合、そのデバイスからの
    //              入力は判定しません。<br>
    //              例えば、キーボードが無効になっている場合は
    //              out_type_ には必ず LN_INPUTDEVICE_JOYPAD だけが返ります。
    //*/
    //---------------------------------------------------------------------
	//bool getPressedButton( LNInputDeviceType* out_type_, int* out_button_ );

    //---------------------------------------------------------------------
    ///**
    //  @brief      ボタン配置 (キーコンフィグ) を設定する
    //
    //  @param[in]  ln_button_   : 変更するボタン
    //  @param[in]  dev_type_    : 設定するデバイスの種類
    //  @param[in]  new_button_  : 新しく設定する仮想キーコードまたはボタン番号
    //  @param[in]  duplication_ : true の場合、重複を許可する
    //
    //  @par
    //              基本的に getPressedButton() とセットで使い、
    //              getPressedButton() が true を返した時に、getPressedButton()から
    //              受け取ったデバイス種類とボタン番号をこの関数に渡します。<br>
    //              <br>
    //              詳しくははサンプルの「Light_Input_KeyConfig.cpp」を参考にしてください。
    //              <br>
    //              duplication_ が false の場合、ln_button_ 以外のボタンに
    //              同じキーが割り当てられている場合、値を交換します。
    //*/
    //---------------------------------------------------------------------
	//void setKeyConfig( LNGameControllerButton ln_button_, LNInputDeviceType dev_type_, int new_button_, bool duplication_ );

    //---------------------------------------------------------------------
    ///**
    //  @brief      コントローラに対するコンフィグデータを扱うクラスの取得
    //*/
    //---------------------------------------------------------------------
    //const LKeyConfigData& getConfigData();
	//void getConfigData( LKeyConfigData* config_ ) const;

    //---------------------------------------------------------------------
    ///**
    //  @brief      コントローラに対するコンフィグデータを扱うクラスの取得
    //
    //  @param[out] config_ : コンフィグデータ
    //*/
    //---------------------------------------------------------------------
	//void setConfigData( const LKeyConfigData& config_ );



	LN_UTIL_REFCLASS_METHODS( LGameController, Core::Input::IGameController );
};

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace LNote

//=============================================================================
//								end of file
//=============================================================================