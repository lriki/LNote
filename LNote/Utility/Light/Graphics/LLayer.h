//=============================================================================
//【 LLayer 】
//-----------------------------------------------------------------------------
///**
//  @file       LLayer.h
//  @brief      LLayer
//  @version    1.0
//  @date       2012/12/12
//*/
//=============================================================================

#pragma once

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "../../Core/Scene/Manager.h"
#include "LTexture.h"

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{

//=============================================================================
// ■ LLayer クラス
//-----------------------------------------------------------------------------
///**
//  @brief      レイヤーのクラス
//*/
//=============================================================================
class LLayer
    : public LRefClass< LLayer, Core::Scene::Pane >
{
public:

    //---------------------------------------------------------------------
	///**
	//  @brief      背景レイヤーの取得
    //
    //  @par
    //              背景レイヤーは必ずひとつ存在し、全てのシーンオブジェクト
    //              (LSceneObject を継承している、LSprite や LModel 等)
    //              の描画結果となるレンダリングターゲットを管理します。<br>
    //              <br>
    //              背景レイヤーに対して適用されたブラーやトランジション等の
    //              エフェクトは、画面全体に適用されます。
    //*/
	//---------------------------------------------------------------------
	static LLayer getBGLayer();

public:

    //---------------------------------------------------------------------
    ///**
    //  @brief      色調の設定
    //
    //  @param[in]  tone_     : 設定する色調
    //  @param[in]  duration_ : 変化にかける時間 (秒)
    //
    //  @par
    //              レイヤー全体の色調を設定します。<br>
    //              <br>
    //              duration_ に 0.0 よりも大きい値が渡された場合、
    //              時間経過によって色調を徐々に変化させます。<br>
    //              これによって、フェードイン・フェードアウトを簡単に
    //              行う事ができます。<br>
    //*/
    //---------------------------------------------------------------------
    void setTone( const LTone& tone_, double duration_ = 0.0 );

    //---------------------------------------------------------------------
    ///**
    //  @brief      ブラーの適用
    //
    //  @param[in]  duration_     : 適用する時間 (秒)
    //  @param[in]  power_        : ブラーの強さ (ブラーイメージを描画する時のアルファ値。0.0〜1.0 で指定)
    //  @param[in]  scale_        : ブラーの大きさ (長さ)
    //  @param[in]  center_       : ブラーの中心座標
    //  @param[in]  center_is_3d_ : center_ の座標情報が示す座標空間 (true の場合、3D 空間上の点)
    // 
    //  @par
    //              
    //              duration_ が 0 より大きい場合、値分の時間をかけて<br>
    //              徐々に power_ を 0 に戻します。
    //              <br>
    //              duration_ が 0 の場合は強さを自動で変化させません。<br>
    //              元に戻すためには、もう一度この関数を呼んで power_ を 0 にする必要があります。<br>
    //              <br>
    //              <br>
    //              scale_ は元のスクリーンイメージに対して、1フレーム当たりどの程度拡大するかを指定します。<br>
    //              1.0 でスクリーンと等倍 (変化なし)、2.0 でスクリーンの2倍の大きさとなります。<br>
    //              scale_ が 1.0 の場合、ブラーは放射状に拡散しません。<br>
    //              通常は 1.0〜1.1 の範囲で指定するのが無難です。<br>
    //              また、1.0 より小さい値を指定すると内側向きのブラーになります。<br>
    //              <br>
    //              <br>
    //              center_is_3d_ は、center_ が 2D 空間上の座標か、3D 空間上の座標かを区別するために指定します。<br>
    //              <br>
    //              false が指定されている場合、center_ の値がそのままブラーの中心座標になります。<br>
    //              中心座標はレイヤーの左上を原点(0, 0)として、ピクセル単位で指定します。<br>
    //              <br>
    //              true が指定されている場合、center_ を3D空間上の点として、このレイヤーにセットされているカメラから見た
    //              スクリーン座標上の点を中心とします。<br>
    //              <br>    
    //*/
    //---------------------------------------------------------------------
    void blur( double duration_, lnfloat power_, lnfloat scale_, const LVector3& center_, bool center_is_3d_ );

    //---------------------------------------------------------------------
    ///**
    //  @brief      トランジションの準備として現在の画面を固定する
    //
    //  @par
    //              transition() を呼ぶ前に必ずこの関数を呼ぶ必要があります。<br>
    //              この関数以降、transition() が呼ばれるまで
    //              画面の更新を行わなくなります。
    //*/
    //---------------------------------------------------------------------
	void freeze();

    //---------------------------------------------------------------------
    ///**
    //  @brief      トランジション実行
    //
    //  @param[in]  duration_     : 変化にかける時間 (秒)
    //  @param[in]  mask_texture_ : 
    //  @param[in]  duration_     : 境界のあいまいさ (0〜255)
    //
    //  @par
    //              
    //*/
    //---------------------------------------------------------------------
    void transition( double duration_, LTexture mask_texture_, u32 vague_ = 40 );

    //---------------------------------------------------------------------
    ///**
    //  @brief      エフェクトが適用中かを判定する
    //
    //  @par
    //              色調変化、ブラー、トランジションのいずれかを
    //              適用中の場合、true を返します。
    //*/
    //---------------------------------------------------------------------
	bool isEffect() const;

    LN_UTIL_REFCLASS_METHODS( LLayer, Core::Scene::Pane );
};


//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace LNote

//=============================================================================
//                              end of file
//=============================================================================