//=============================================================================
//【 LDebugFont 】
//-----------------------------------------------------------------------------
///**
//  @file       LDebugFont.h
//  @brief      LDebugFont
//  @version    1.0
//  @date       2010/11/24
//*/
//=============================================================================

#pragma once
#if 0
//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "../../Engine/Graphics/Simple/DebugFont.h"
#include "../Base/LRefClass.h"
#include "../Math/LMath.h"
#include "Types.h"

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{

//=============================================================================
// ■ LDebugFont クラス
//-----------------------------------------------------------------------------
///**
//	@brief      デバッグ用の文字列を描画するためのクラス
//
//  @par
//              LNote::Accessor 名前空間内の dout または DebugFont グローバル変数
//              によってアクセスすることができます。
//
//  @note
//              dout は std::cout をイメージしたものです。名前が単純なので
//              不満が多かったらカットするかも。
//*/
//=============================================================================
class LDebugFont
    : public LSingletonRefClass< LDebugFont, Graphics::DebugFont >
{
public:

    /// インスタンスの取得
    static LDebugFont getInstance();

public:

    //---------------------------------------------------------------------
	///**
    //  @brief      表示位置の設定
    //*/		
	//---------------------------------------------------------------------
	void setPosition( int x_, int y_ );

    //---------------------------------------------------------------------
	///**
    //  @brief      文字色の設定
    //*/		
	//---------------------------------------------------------------------
    void setColor( const LColor& color_ );

    //---------------------------------------------------------------------
	///**
    //  @brief      文字列を出力する
    //
    //  @par
    //              文字列は内部でバッファに溜められ、描画処理の最後で
    //              まとめて描画されます。
    //*/		
	//---------------------------------------------------------------------
	void printf( const char* format_, ... );

    //---------------------------------------------------------------------
	///**
    //  @brief      printf の関数オブジェクト形式
    //*/		
	//---------------------------------------------------------------------
	void operator()( const char* format_, ... );

    LDebugFont& operator << ( const char* c_ );
	LDebugFont& operator << ( unsigned char v_ );
	LDebugFont& operator << ( short v_ );
	LDebugFont& operator << ( unsigned short v_ );
	LDebugFont& operator << ( int v_ );
	LDebugFont& operator << ( unsigned int v_ );
	LDebugFont& operator << ( float v_ );
	LDebugFont& operator << ( double v_ );
	LDebugFont& operator << ( bool v_ );
	LDebugFont& operator << ( void* p_ );
};

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace LNote
#endif
//=============================================================================
//                              end of file
//=============================================================================