//=============================================================================
//【 LTexture 】
//-----------------------------------------------------------------------------
///**
//  @file       LTexture.h
//  @brief      LTexture
//  @version    1.0
//  @date       2010/10/06
//*/
//=============================================================================

#pragma once

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "../../Core/Graphics/Interface.h"
#include "../Math/LMath.h"
#include "LFont.h"
#include "Types.h"

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{

//=============================================================================
// ■ LTexture クラス
//-----------------------------------------------------------------------------
///**
//  @brief     テクスチャのクラス
//
//  @par
//              テクスチャは画像そのものを表すクラスです。
//              画面にテクスチャを表示するにはスプライト (LSprite) 等を使う必要があります。
//*/
//=============================================================================
class LTexture
    : public LRefClass< LTexture, Core::Graphics::ITexture >
{
public:

    //---------------------------------------------------------------------
    ///**
    //  @brief      画像ファイルからテクスチャを作成する
    //
    //  @param[in]  filename_  : 画像ファイル名
    //  @param[in]  color_key_ : 作成時に透過色として扱う色
    //
    //  @par
    //              使用できる画像ファイルは <br>
    //              .bmp、.dds、.dib、.hdr、.jpg、.pfm、.png、.ppm、.tga です。<br>
    //              <br>
    //              color_key_ で透過色を指定する場合は 32 ビットの色コードを<br>
    //              渡します。0 を渡すと無視されます。<br>
    //*/
    //---------------------------------------------------------------------
    static LTexture create( const char* filename_, u32 color_key_ = 0 );

    //---------------------------------------------------------------------
    ///**
    //  @brief      テクスチャを作成する
    //
    //  @param[in]  width_       : 幅 (ピクセル数)
    //  @param[in]  height_      : 高さ (ピクセル数)
    //  @param[in]  clear_color_ : 作成時に塗りつぶす色 (32 ビット値で指定)
    //*/
    //---------------------------------------------------------------------
    static LTexture create( u32 width_, u32 height_, u32 clear_color_ = 0 );

public:

    //---------------------------------------------------------------------
    ///**
    //  @brief      サイズの取得
    //
    //  @par
    //              作成時に指定されたサイズ (画像ファイルから作成した場合はそのサイズ)
    //              を返します。
    //*/
    //---------------------------------------------------------------------
    const LVector2& getSize() const;

    //---------------------------------------------------------------------
    ///**
    //  @brief      実際のサイズの取得
    //
    //  @par
    //              作成時、デバイスによってスケーリングされた後のサイズを返します。
    //              環境によっては強制的に 2 の累乗にリサイズされるため、
    //              (320×240 の画像を読み込んだ場合、512×256 になってしまう等)
    //              必要があればこの関数でサイズを調べることができます。
    //              リサイズされなかった場合は getSize() と同じ値を返します。
    //*/
    //---------------------------------------------------------------------
	const LVector2& getRealSize() const;

    //---------------------------------------------------------------------
    ///**
    //  @brief      テクスチャをクリアする
    //
    //  @par
    //              テクスチャ全体を指定された色で塗りつぶします。
    //              現在、この関数によるレンダーターゲットと深度バッファのクリアは
    //              サポートしていません。
    //*/
    //---------------------------------------------------------------------
	void clear( const LColor& color_ );

    //---------------------------------------------------------------------
    ///**
    //  @brief      drawText() で使用するフォントの設定     
    //*/
    //---------------------------------------------------------------------
    void setFont( LFont font_ );

    //---------------------------------------------------------------------
    ///**
    //  @brief      設定されているフォントの取得     
    //*/
    //---------------------------------------------------------------------
    LFont getFont();

    //---------------------------------------------------------------------
    ///**
    //  @brief      文字列を描画する
    //
    //  @param[in]  text_  : 描画する文字列
    //  @param[in]  x_     : 描画先の左上 X 座標
    //  @param[in]  y_     : 描画先の左上 Y 座標
    //  @param[in]  len_   : 描画する文字数 (-1 で終端文字まで描画する)
    //
    //  @par
    //              文字列の描画には時間がかかります。<br>
    //              1 フレームごとに文字列を再描画するような使い方は避けてください。          
    //*/
    //---------------------------------------------------------------------
    void drawText( const lnChar* text_, int x_, int y_, int len_ = -1 );

    //---------------------------------------------------------------------
    ///**
    //  @brief      文字列を描画する
    //
    //  @param[in]  text_  : 描画する文字列
    //  @param[in]  rect_  : 描画領域を示す矩形
    //  @param[in]  align_ : テキストの水平方向の配置
    //  @param[in]  len_   : 描画する文字数 (-1 で終端文字まで描画する)
    //
    //  @par
    //              rect_ で示された領域に文字列を描画します。
    //              文字が領域からはみ出る場合、はみ出た部分は描画されません。<br>
    //              <br>
    //              文字列の描画には時間がかかります。<br>
    //              1 フレームごとに文字列を再描画するような使い方は避けてください。
    //*/
    //---------------------------------------------------------------------
    void drawText( const lnChar* text_, const LRect& rect_, LNTextAlign align_ = LN_TEXTALIGN_LEFT, int len_ = -1 );

    //---------------------------------------------------------------------
    ///**
    //  @brief      テクスチャのブロック転送
    //
    //  @param[in]  x_           : 転送先の左上 X 座標
    //  @param[in]  y_           : 転送先の左上 Y 座標
    //  @param[in]  src_texture_ : 転送元のテクスチャ
    //  @param[in]  src_rect_    : 転送元領域を示す矩形
    //*/
    //---------------------------------------------------------------------
    void blt( int x_, int y_, LTexture src_texture_, const LRect& src_rect_ );


    LN_UTIL_REFCLASS_METHODS( LTexture, Core::Graphics::ITexture );
};







//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace LNote

//=============================================================================
//                              end of file
//=============================================================================