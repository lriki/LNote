//=============================================================================
//【 InFile 】
//=============================================================================

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "stdafx.h"
#include "Manager.h"
#include "InFile.h"

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{
namespace Core
{
namespace File
{

//=============================================================================
// ■ InFile クラス
//=============================================================================

	//---------------------------------------------------------------------
	// ● コンストラクタ
	//---------------------------------------------------------------------
	InFile::InFile( Manager* manager_, IInStream* stream_ )
		: ASyncProcessObject	( manager_ )
		, mInStream				( stream_ )
        , mData                 ( NULL )
        , mLoadFinished         ( false )
	{
	}

	//---------------------------------------------------------------------
	// ● デストラクタ
	//---------------------------------------------------------------------
	InFile::~InFile()
	{
		// 非同期読み込みでロードが完了していない場合は終了を待つ
        ASyncProcessObject::wait();

		// 完了を待ってからストリームを解放する
        LN_SAFE_RELEASE( mInStream );
        SAFE_DELETE_ARRAY( mData );
	}

	//---------------------------------------------------------------------
	// ● データの読み込み
	//---------------------------------------------------------------------
	int InFile::read( void* buffer_, int buffer_size_, int read_size_ )
	{
		if ( read_size_ < 0 )
		{
			read_size_ = buffer_size_;
		}

		if ( read_size_ > buffer_size_ )
		{
			read_size_ = buffer_size_;
		}

        // 読み込んで、読み込めたバイト数を read_size に格納
        int read_size = mInStream->read( buffer_, buffer_size_, read_size_ );

		// 念のためファイルポインタを先頭に戻しておく
        //mInStream->seek( 0 );
		//fseek( mInStream->Stream, 0, SEEK_SET );

		return read_size;
	}


	//---------------------------------------------------------------------
	// ● ファイルの内容を全て読み込む
	//---------------------------------------------------------------------
	void InFile::load( bool async_ )
	{
		if ( async_ )
		{
            ASyncProcessObject::start();
		}
		else
		{
			onLoading();
		}
	}

	//---------------------------------------------------------------------
	// ● 全データ読み込み
	//---------------------------------------------------------------------
	bool InFile::onLoading()
	{
		if ( mData == NULL )
		{
            int size = mInStream->getSize();
            lnByte* data = LN_NEW lnByte[ size + 1 ];
            int read_size = mInStream->read( data, size );
            data[ read_size ] = '\0';	// 念のための終端 NULL

            mData = data;
            mLoadFinished = true;
		}

		return true;
	}


//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace File
} // namespace Core
} // namespace LNote

//=============================================================================
//								end of file
//=============================================================================