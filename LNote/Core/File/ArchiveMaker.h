//=============================================================================
//【 ArchiveMaker 】
//-----------------------------------------------------------------------------
///**
//  @file       ArchiveMaker.h
//  @brief      ArchiveMaker
//  @author     Riki
//*/
//=============================================================================

#pragma once

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "../Base/RefString.h"

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{
namespace Core
{
namespace File
{

//=============================================================================
// ■ ArchiveMaker クラス
//-----------------------------------------------------------------------------
///**
//  @brief      アーカイブファイルを作るためのクラス
//*/
//=============================================================================
class ArchiveMaker
    : public Base::NonCopyable
{
public:

	/// コンストラクタ
	ArchiveMaker();

	/// デストラクタ
	virtual ~ArchiveMaker();

public:

    //---------------------------------------------------------------------
    ///**
    //  @brief		新しくアーカイブファイルを開く
    //
    //  @param[in]  filename_ : 新しく作成するアーカイブファイルの名前
    //  @param[in]  key_      : 暗号化に使う文字列 ( \0 終端 )
    //
    //  @retval     true  : 成功
    //  @retval     false : ファイルを開くことができなかった
    //
    //  @par
    //              ファイルを書き込み専用で開きます。
    //              ( fopen() に "wb" を指定した状態。無い場合は新規作成 )<br><br>
    //*/
    //---------------------------------------------------------------------
    bool open( const lnChar* filename_, const char* key_ = NULL );
    //void open( const wchar_t* filename_, const char* key_ );

    //---------------------------------------------------------------------
    ///**
    //  @brief		アーカイブファイルを閉じる
    //
    //  @par
    //              追加されたファイルの数を書き込んで、ファイルストリームを閉じます。
    //              開かれていない場合はなにもしません。<br>
    //              デストラクタでも呼び出されます。(std::fstream と同じ仕様)
    //*/
    //---------------------------------------------------------------------
    void close();

    //---------------------------------------------------------------------
    ///**
    //  @brief		ファイルを追加する
    //
    //  @param[in]  filename_    : 追加するファイルの名前
    //  @param[in]  access_name_ : プログラムからアクセスする時の名前
    //
    //  @retval     true  : 成功
    //  @retval     false : ファイルを開くことができなかった
    //
    //  @par
    //              filename_ のファイルをアーカイブに追加します。<br>
    //              access_name_ を指定した場合、ファイルに別名をつけた上で追加します。
    //              Archive クラスの open() によってアーカイブ内のファイルにアクセスする場合、
    //              この名前でアクセスするようにします。<br>
    //              access_name_ を省略した場合は filename_ がそのまま使われます。
    //*/
    //---------------------------------------------------------------------
    bool addFile( const lnChar* filename_, const lnChar* access_name_ = NULL );

private:

    /// パディングを考慮して、開いているアーカイブファイルにデータを書き込む
	void _writePadding16( const void* data_, u32 size_ );

    /// パディングを考慮して、整数を書き込む (ファイル名長さ、ファイルサイズ用)
	void _writeU32Padding16( u32 v0_, u32 v1_ );

	/// 開いているアーカイブファイルにデータを書き込む
	void _write( const void* data_, u32 size_ );

	/// 追加するファイルのストリームを受けとって、実際に追加する
	void _addFile( FILE* stream_ );


private:

    static const int VER_MAJOR = 1;
    static const int VER_MINOR = 0;

    static const int KEY_SIZE  = 128;

	FILE*			        mStream;			///< アーカイブファイルのファイルストリーム
    Base::RefString	        mEncryptionKey;		///< 暗号化に使うキー
	u32				        mFileNum;			///< ファイル数
    lnByte                  mKeyTable[ 256 ];

    int                     mBlockLength;
};

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace File
} // namespace Core
} // namespace LNote

//=============================================================================
//								end of file
//=============================================================================