//=============================================================================
//【 StreamObject 】
//=============================================================================

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "stdafx.h"
#include "FileUtil.h"
#include "StreamObject.h"

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{
namespace Core
{
namespace File
{

//=============================================================================
// ■ InFileStream クラス
//=============================================================================

    //---------------------------------------------------------------------
	// ● コンストラクタ
    //---------------------------------------------------------------------
    InFileStream::InFileStream()
        : mStream   ( NULL )
        , mSize     ( 0 )
    {
    	}

	//---------------------------------------------------------------------
	// ● デストラクタ
    //---------------------------------------------------------------------
    InFileStream::~InFileStream()
    {
        _close();
    }

    //---------------------------------------------------------------------
	// ● 初期化
    //---------------------------------------------------------------------
    void InFileStream::initialize( const lnChar* filename_ )
    {
        _close();

        mStream = _tfopen( filename_, _T( "rb" ) );

        LN_THROW_FileNotFound( mStream, filename_ );

        fseek( mStream, 0, SEEK_END );
	    mSize = ftell( mStream );
        fseek( mStream, 0, SEEK_SET );
    }

    //---------------------------------------------------------------------
	// ● データの読み込み
    //---------------------------------------------------------------------
    int InFileStream::read( void* buffer_, int buffer_size_, int read_size_ = -1 )
    {
        if ( read_size_ < 0 )
		{
			read_size_ = buffer_size_;
		}

        return fread( buffer_, 1, read_size_, mStream );
    }

	//---------------------------------------------------------------------
	// ● ファイルポインタの設定
    //---------------------------------------------------------------------
    void InFileStream::seek( int offset_, int origin_ = SEEK_SET )
    {
        fseek( mStream, offset_, origin_ );
    }

    //---------------------------------------------------------------------
	// ● ファイルを閉じる
    //---------------------------------------------------------------------
    void InFileStream::_close()
    {
        if ( mStream )
        {
            fclose( mStream );
            mSize = 0;
        }
    }

//=============================================================================
// ■ InManagedMemoryStream クラス
//=============================================================================

    //---------------------------------------------------------------------
	// ● コンストラクタ
    //---------------------------------------------------------------------
    InManagedMemoryStream::InManagedMemoryStream()
        : mSize         ( 0 )
        , mBuffer       ( NULL )
        , mSeekPoint    ( 0 )
    {
    }

    //---------------------------------------------------------------------
	// ● デストラクタ
    //---------------------------------------------------------------------
    InManagedMemoryStream::~InManagedMemoryStream()
    {
        _dispose();
    }

    //---------------------------------------------------------------------
	// ● 初期化
    //---------------------------------------------------------------------
    void InManagedMemoryStream::initialize( const void* buffer_, int size_ )
    {
        _dispose();

        mSize = size_;
        mBuffer = LN_NEW char[ mSize ];
        memcpy( mBuffer, buffer_, mSize );
    }

	//---------------------------------------------------------------------
	// ● データの読み込み
    //---------------------------------------------------------------------
    int InManagedMemoryStream::read( void* buffer_, int buffer_size_, int read_size_ )
    {
        if ( read_size_ < 0 )
		{
			read_size_ = buffer_size_;
		}
        if ( mSeekPoint + read_size_ > mSize )
        {
            read_size_ = mSize - mSeekPoint;
        }

        memcpy( buffer_, &mBuffer[ mSeekPoint ], read_size_ );

        mSeekPoint += read_size_;

        return read_size_;
    }

	//---------------------------------------------------------------------
	// ● ファイルポインタの設定
    //---------------------------------------------------------------------
    void InManagedMemoryStream::seek( int offset_, int origin_ )
    {
        mSeekPoint = File::setSeekPoint( mSeekPoint, mSize, offset_, origin_ );
    }

    //---------------------------------------------------------------------
	// ● メモリ解放
    //---------------------------------------------------------------------
    void InManagedMemoryStream::_dispose()
    {
        SAFE_DELETE_ARRAY( mBuffer );
        mSize = 0;
        mSeekPoint = 0;
    }

//=============================================================================
// ■ InUnManagedMemoryStream クラス
//=============================================================================

    //---------------------------------------------------------------------
	// ● コンストラクタ
    //---------------------------------------------------------------------
    InUnManagedMemoryStream::InUnManagedMemoryStream()
        : mSize         ( 0 )
        , mBuffer       ( NULL )
        , mSeekPoint    ( 0 )
    {
    }

    //---------------------------------------------------------------------
	// ● デストラクタ
    //---------------------------------------------------------------------
    InUnManagedMemoryStream::~InUnManagedMemoryStream()
    {
        mSize = 0;
        mSeekPoint = 0;
    }

    //---------------------------------------------------------------------
	// ● 初期化
    //---------------------------------------------------------------------
    void InUnManagedMemoryStream::initialize( const void* buffer_, int size_ )
    {
        mSize = size_;
        mBuffer = static_cast< const lnByte* >( buffer_ );
    }

	//---------------------------------------------------------------------
	// ● データの読み込み
    //---------------------------------------------------------------------
    int InUnManagedMemoryStream::read( void* buffer_, int buffer_size_, int read_size_ )
    {
        if ( read_size_ < 0 )
		{
			read_size_ = buffer_size_;
		}
        if ( mSeekPoint + read_size_ > mSize )
        {
            read_size_ = mSize - mSeekPoint;
        }

        memcpy( buffer_, &mBuffer[ mSeekPoint ], read_size_ );

        mSeekPoint += read_size_;

        return read_size_;
    }

	//---------------------------------------------------------------------
	// ● ファイルポインタの設定
    //---------------------------------------------------------------------
    void InUnManagedMemoryStream::seek( int offset_, int origin_ )
    {
        mSeekPoint = File::setSeekPoint( mSeekPoint, mSize, offset_, origin_ );
    }

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace File
} // namespace Core
} // namespace LNote

//=============================================================================
//								end of file
//=============================================================================