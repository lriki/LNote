//=============================================================================
//Åy Util Åz
//=============================================================================

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "stdafx.h"
#include "Asm.h"
#include "Math.h"

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{
namespace Core
{
namespace Math
{

//=============================================================================
// Å° Math ÉÇÉWÉÖÅ[Éã
//=============================================================================

	//const lnfloat PI = 3.1415926535897932384626433832795f;	///< â~é¸ó¶

	static const u32 MAX_PRECISION = 65536;

	static lnfloat	sSineTable[ MAX_PRECISION + 1 ];
	static lnfloat	sCosinTable[ MAX_PRECISION + 1 ];
	static lnfloat	sTangentTable[ MAX_PRECISION + 1 ];
	static u32		sPrecision = MAX_PRECISION;

	//---------------------------------------------------------------------
	// Åú èâä˙âª
	//---------------------------------------------------------------------
	bool initializeTable( u32 precision_ )
	{
		if ( precision_ <= 0 || MAX_PRECISION < precision_ ) { 
	return false; }

		sPrecision = precision_;

		lnfloat r;
        lnfloat rc = LMath::PI / ( sPrecision / 2 );

		for ( u32 i = 0; i < sPrecision + 1; ++i )
		{
			r = static_cast< lnfloat >( i ) * rc;
			sSineTable[ i ] = sinf( r );
			sCosinTable[ i ] = cosf( r );
			sTangentTable[ i ] = tanf( r );
		}
		return true;
	}

	//---------------------------------------------------------------------
	// Åú sin
	//---------------------------------------------------------------------
	lnfloat sinIdx( int r_ )
	{
		return sSineTable[ ( ( r_ < 0 ) ? sPrecision - ( -r_ % sPrecision ) : r_ % sPrecision ) ];
	}

	//---------------------------------------------------------------------
	// Åú cos
	//---------------------------------------------------------------------
	lnfloat cosIdx( int r_ )
	{
		// -256 Ç™ì¸Ç¡ÇΩéûÅA[ 256 ] Ç…Ç»ÇÈÇÃÇ≈É}ÉYÉCÇ∆Ç¢Ç§ÇÌÇØÇ≈ + 1 ÇÃèCê≥
		return sCosinTable[ ( ( r_ < 0 ) ? sPrecision - ( -r_ % sPrecision ) : r_ % sPrecision ) ];
	}

	//---------------------------------------------------------------------
	// Åú tan
	//---------------------------------------------------------------------
	lnfloat tanIdx( int r_ )
	{
		return sTangentTable[ ( ( r_ < 0 ) ? sPrecision - ( -r_ % sPrecision ) : r_ % sPrecision ) ];
	}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace Math
} // namespace Core
} // namespace LNote

//=============================================================================
//								end of file
//=============================================================================