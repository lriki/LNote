//=============================================================================
// SSBasic2D
//-----------------------------------------------------------------------------
//  2D描画基本
//=============================================================================

//=============================================================================
// HLSL
//=============================================================================
@hlsl

float4x4        gWorldMatrix    : WORLD;
float4x4        g2DProjMatrix   : VIEWPROJECTION; // スクリーンの左上を原点にとし、-0.5 のピクセルオフセットを含めてスクリーン座標空間上に座標変換する行列

// なんかなくても結果変わらない…？
float2          gViewportSize   = float2(640.0, 480.0);//: VIEWPORTPIXELSIZE;
static float2   gViewportOffset = ( float2( 0.5, 0.5 ) / gViewportSize );

float           gOpacity        : OPACITY;
float4          gColorScale     : COLORSCALE;
float4          gBlendColor     : BLENDCOLOR;
float4          gTone           : TONE;
static float4   gColor          = float4( gColorScale.xyz, gColorScale.a * gOpacity );

texture gMaterialTexture	    : MATERIALTEXTURE;
sampler gTexSampler = sampler_state
{
    texture = < gMaterialTexture >;
    MINFILTER = NONE;
    MAGFILTER = NONE;
};

struct VS_OUTPUT 
{
    float4 Pos      : POSITION;
    float2 TexUV    : TEXCOORD0;
};

//-------------------------------------------------------------------------
// vertex shader
//-------------------------------------------------------------------------
VS_OUTPUT vsBasic(
    float3 in_pos_  : POSITION,
    float2 in_uv_   : TEXCOORD0 )
{
    VS_OUTPUT o;
    
    o.Pos = mul( float4( in_pos_, 1.0 ), gWorldMatrix );
    o.Pos = mul( o.Pos, g2DProjMatrix );
    
    o.TexUV = in_uv_;

    return o;
}

//-------------------------------------------------------------------------
// pixel shader
//-------------------------------------------------------------------------
float4 psBasic(
    float2 in_uv_   : TEXCOORD0  ) : COLOR
{
    float4 out_color = tex2D( gTexSampler, in_uv_ ) * gColor;
    
    // ブレンドの計算
    //out_color.rgb = ( gBlendColor.rgb * gBlendColor.a ) + ( out_color.rgb * ( 1.0 - gBlendColor.a ) );
    out_color.rgb = lerp( out_color.rgb, gBlendColor.rgb, gBlendColor.a );
    
    // 色調の計算。(NTSC 系加重平均法というらしい。緑だけがなんとなく明るく感じるとかを防ぐ)
	float y = ( 0.208012 * out_color.r + 0.586611 * out_color.g + 0.114478 * out_color.b ) * gTone.w;
    out_color.rgb = ( out_color.rgb * ( 1.0 - gTone.w ) ) + y + gTone.rgb;
    
    return out_color;
}

//-------------------------------------------------------------------------
// technique
//-------------------------------------------------------------------------
technique MainDraw
{
    pass P0
    {
        VertexShader = compile vs_2_0 vsBasic();
        PixelShader	 = compile ps_2_0 psBasic();
    }
}

@endhlsl
//=============================================================================
// GLSL
//=============================================================================
@glslvert

// uniform
uniform mat4    gWorldMatrix;
uniform mat4    g2DProjMatrix ;

// attribute
attribute vec3  lnPosition;
attribute vec2  lnTexCoord0;

// varying
varying vec2    vTexUV;

void main()
{
    gl_Position = vec4( lnPosition, 1.0 ) * gWorldMatrix * g2DProjMatrix;
    vTexUV      = lnTexCoord0;
    vTexUV.y    = 1.0 - vTexUV.y;
}

@endglslvert
//-------------------------------------------------------------------------
@glslflag

#ifdef GL_ES
precision mediump float;
#endif

// uniform
uniform float   gOpacity;
uniform vec4    gColorScale;
uniform vec4    gBlendColor;
uniform vec4    gTone;
vec4            gColor = vec4( gColorScale.xyz, gColorScale.a * gOpacity );

// sampler
uniform sampler2D gMaterialTexture;

// varying
varying vec2    vTexUV;

void main(void)
{
    gl_FragColor = texture2D( gMaterialTexture, vTexUV ) * gColor;
    
    gl_FragColor.rgb = mix( gl_FragColor.rgb, gBlendColor.rgb, gBlendColor.a );
    
	float y = ( 0.208012 * gl_FragColor.r + 0.586611 * gl_FragColor.g + 0.114478 * gl_FragColor.b ) * gTone.w;
    gl_FragColor.rgb = ( gl_FragColor.rgb * ( 1.0 - gTone.w ) ) + y + gTone.rgb;
}

@endglslflag
//-------------------------------------------------------------------------
@glslmeta

setSemantics( "gWorldMatrix",       "WORLD" );
setSemantics( "g2DProjMatrix",      "VIEWPROJECTION" );

setSemantics( "gOpacity",           "OPACITY" );
setSemantics( "gColorScale",        "COLORSCALE" );
setSemantics( "gBlendColor",        "BLENDCOLOR" );
setSemantics( "gTone",              "TONE" );

setSemantics( "gMaterialTexture",   "MATERIALTEXTURE" );

@endglslmeta
//=============================================================================
//                              end of file
//=============================================================================
