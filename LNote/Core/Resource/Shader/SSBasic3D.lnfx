//=============================================================================
// SSBasic3D
//-----------------------------------------------------------------------------
//  3D 基本
//=============================================================================

//=============================================================================
// HLSL
//=============================================================================
@hlsl

float4x4        gWorldMatrix        : WORLD;
float4x4        gViewProjMatrix     : VIEWPROJECTION;

// マテリアル
float4          gMaterialDiffuse    : DIFFUSE  < string Object = "Geometry"; >;
float3          gMaterialAmbient    : AMBIENT  < string Object = "Geometry"; >;
float3          gMaterialEmisive    : EMISSIVE < string Object = "Geometry"; >;
float3          gMaterialSpecular   : SPECULAR < string Object = "Geometry"; >;
float           gSpecularPower      : SPECULARPOWER < string Object = "Geometry"; >;
float3          gMaterialToon       : TOONCOLOR;

// ライト
float3          gLightDirection     : DIRECTION < string Object = "Light"; >;
float3          gLightDiffuse       : DIFFUSE   < string Object = "Light"; >;
float3          gLightAmbient       : AMBIENT   < string Object = "Light"; >;
float3          gLightSpecular      : SPECULAR  < string Object = "Light"; >;
static float4   gDiffuseColor       = gMaterialDiffuse  * float4( gLightDiffuse, 1.0f );
static float3   gAmbientColor       = saturate( gMaterialAmbient  * gLightAmbient + gMaterialEmisive );
static float3   gSpecularColor      = gMaterialSpecular * gLightSpecular;

// オブジェクトの色情報
float           gOpacity            : OPACITY;
float4          gColorScale         : COLORSCALE;
float4          gBlendColor         : BLENDCOLOR;
float4          gTone               : TONE;
static float4   gColor              = float4( gColorScale.xyz, gColorScale.a * gOpacity );

//-------------------------------------------------------------------------
// テスクチャ
//-------------------------------------------------------------------------
texture gMaterialTexture	        : MATERIALTEXTURE;
sampler gTexSampler = sampler_state
{
    texture = < gMaterialTexture >;
    MINFILTER = NONE;
    MAGFILTER = NONE;
    
    //ADDRESSU = MIRRORONCE;
    //ADDRESSV = MIRRORONCE;
};

//-------------------------------------------------------------------------
// 出力構造体
//-------------------------------------------------------------------------
struct VS_OUTPUT
{
    float4 Pos      : POSITION;
    float4 Color    : COLOR0;
    float2 TexUV    : TEXCOORD0;
};

//-------------------------------------------------------------------------
// vertex shader
//-------------------------------------------------------------------------
VS_OUTPUT vsBasic(
    float3 in_pos_      : POSITION,
    float3 in_normal_   : NORMAL,
    float4 in_color_    : COLOR0,
    float2 in_uv_       : TEXCOORD0 )
{
    VS_OUTPUT o;
    
    // 座標変換
    o.Pos = mul( float4( in_pos_, 1.0f ), gWorldMatrix );
	o.Pos = mul( o.Pos, gViewProjMatrix );
    
	// ディフューズ色＋アンビエント色 計算
    float3 global_normal = normalize( mul( in_normal_, (float3x3)gWorldMatrix ) );
    o.Color = in_color_;
    o.Color.rgb = saturate( max( 0, gDiffuseColor.rgb * dot( global_normal, -gLightDirection ) + gAmbientColor ) );//dot( Out.Normal, -LightDirection ))
    o.Color.a = gDiffuseColor.a;
    
	
	// テクスチャ座標
	o.TexUV = in_uv_;
    
    //o.Pos = float4( in_pos_, 1.0f );
    return o;
}

//-------------------------------------------------------------------------
// pixel shader
//-------------------------------------------------------------------------
float4 psBasic(
    float4 in_color_    : COLOR0,
    float2 in_uv_       : TEXCOORD0  ) : COLOR
{
    float4 out_color = tex2D( gTexSampler, in_uv_ ) * in_color_ * gColor;
    
    // ブレンドの計算
    //out_color.rgb = ( gBlendColor.rgb * gBlendColor.a ) + ( out_color.rgb * ( 1.0 - gBlendColor.a ) );
    out_color.rgb = lerp( out_color.rgb, gBlendColor.rgb, gBlendColor.a );
    
    // 色調の計算。(NTSC 系加重平均法というらしい。緑だけがなんとなく明るく感じるとかを防ぐ)
	float y = ( 0.298912 * out_color.r + 0.586611 * out_color.g + 0.114478 * out_color.b ) * gTone.w;
    out_color.rgb = ( out_color.rgb * ( 1.0 - gTone.w ) ) + y + gTone.rgb;

    return out_color;//float4( 1, 0, 0, 1 );//
}

//-------------------------------------------------------------------------
// technique
//-------------------------------------------------------------------------
technique MainDraw
{
    pass P0
    {
        VertexShader = compile vs_2_0 vsBasic();
        PixelShader	 = compile ps_2_0 psBasic();
    }
}

@endhlsl
//=============================================================================
// GLSL
//=============================================================================
@glslvert

// transform
uniform mat4    gWorldMatrix;
uniform mat4    gViewProjMatrix;

// material
uniform vec4    gMaterialDiffuse;
uniform vec3    gMaterialAmbient;
uniform vec3    gMaterialEmisive;
uniform vec3    gMaterialSpecular;
uniform float   gSpecularPower;
uniform vec3    gMaterialToon;

// light
uniform vec3    gLightDirection;
uniform vec3    gLightDiffuse;
uniform vec3    gLightAmbient;
uniform vec3    gLightSpecular;
vec4            gDiffuseColor       = gMaterialDiffuse  * vec4( gLightDiffuse, 1.0 );
vec3            gAmbientColor       = gMaterialAmbient  * gLightAmbient + gMaterialEmisive;//saturate( );
vec3            gSpecularColor      = gMaterialSpecular * gLightSpecular;

// attribute
attribute vec3  lnPosition;
attribute vec3  lnNormal;
attribute vec4  lnColor;
attribute vec2  lnTexCoord0;

// varying
varying vec4    vColor;
varying vec2    vTexUV;

void main()
{
    gl_Position = vec4( lnPosition, 1.0 ) * gWorldMatrix * gViewProjMatrix;
    
    vec3 global_normal = normalize( ( vec4( lnNormal, 1.0 ) * gWorldMatrix ).xyz );
    vColor = lnColor;
    
    //vColor.rgb = clamp( max( 0, gDiffuseColor.rgb * dot( global_normal, -gLightDirection ) + clamp( gAmbientColor, 0.0, 1.0 ) ), 0.0, 1.0 );//dot( Out.Normal, -LightDirection ))
    //vColor.a = gDiffuseColor.a;
    
    vTexUV      = lnTexCoord0;
    vTexUV.y    = 1.0 - vTexUV.y;
    
}

@endglslvert
//-------------------------------------------------------------------------
@glslflag

#ifdef GL_ES
precision mediump float;
#endif

// uniform
uniform float   gOpacity;
uniform vec4    gColorScale;
uniform vec4    gBlendColor;
uniform vec4    gTone;
vec4            gColor = vec4( gColorScale.xyz, gColorScale.a * gOpacity );

// sampler
uniform sampler2D gMaterialTexture;

// varying
varying vec4    vColor;
varying vec2    vTexUV;

void main(void)
{
    gl_FragColor = texture2D( gMaterialTexture, vTexUV ) * vColor * gColor;
    
    //gl_FragColor.rgb = lerp( gl_FragColor.rgb, gBlendColor.rgb, gBlendColor.a );
    
	float y = ( 0.208012 * gl_FragColor.r + 0.586611 * gl_FragColor.g + 0.114478 * gl_FragColor.b ) * gTone.w;
    gl_FragColor.rgb = ( gl_FragColor.rgb * ( 1.0 - gTone.w ) ) + y + gTone.rgb;
}

@endglslflag
//-------------------------------------------------------------------------
@glslmeta

setSemantics( "gWorldMatrix",       "WORLD" );
setSemantics( "gViewProjMatrix",    "VIEWPROJECTION" );

setSemantics(                "gMaterialDiffuse",    "DIFFUSE" );
addVariableAnnotationString( "gMaterialDiffuse",    "Object", "Geometry" );
setSemantics(                "gMaterialAmbient",    "AMBIENT" );
addVariableAnnotationString( "gMaterialAmbient",    "Object", "Geometry" );
setSemantics(                "gMaterialEmisive",    "EMISSIVE" );
addVariableAnnotationString( "gMaterialEmisive",    "Object", "Geometry" );
setSemantics(                "gMaterialSpecular",   "SPECULAR" );
addVariableAnnotationString( "gMaterialSpecular",   "Object", "Geometry" );
setSemantics(                "gSpecularPower",      "SPECULARPOWER" );
addVariableAnnotationString( "gSpecularPower",      "Object", "Geometry" );
setSemantics(                "gMaterialToon",       "TOONCOLOR" );

setSemantics(                "gLightDirection",     "DIRECTION" );
addVariableAnnotationString( "gLightDirection",     "Object", "Light" );
setSemantics(                "gLightDiffuse",       "DIFFUSE" );
addVariableAnnotationString( "gLightDiffuse",       "Object", "Light" );
setSemantics(                "gLightAmbient",       "AMBIENT" );
addVariableAnnotationString( "gLightAmbient",       "Object", "Light" );
setSemantics(                "gLightSpecular",      "SPECULAR" );
addVariableAnnotationString( "gLightSpecular",      "Object", "Light" );

setSemantics( "gOpacity",       "OPACITY" );
setSemantics( "gColorScale",    "COLORSCALE" );
setSemantics( "gBlendColor",    "BLENDCOLOR" );
setSemantics( "gTone",          "TONE" );

setSemantics( "gMaterialTexture", "MATERIALTEXTURE" );

@endglslmeta
//=============================================================================
//
//=============================================================================
