//=============================================================================
//【 RigidBody 】
//=============================================================================

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "stdafx.h"
#include "RigidBody.h"

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{
namespace Core
{
namespace Physics
{

//=============================================================================
// ■ RigidBody クラス
//=============================================================================

    //---------------------------------------------------------------------
	// ● コンストラクタ
    //---------------------------------------------------------------------
    RigidBody::RigidBody( Manager* manager_ )
        : BodyBase      ( manager_ )
        , mBtRigidBody  ( NULL )
    {
        if ( mManager ) mManager->addRigidBody( this );
    }

    //---------------------------------------------------------------------
	// ● デストラクタ
    //---------------------------------------------------------------------
    RigidBody::~RigidBody()
    {
        mManager->deleteRigidBody( this );
    }

    //---------------------------------------------------------------------
	// ● 初期化
    //---------------------------------------------------------------------
    void RigidBody::initialize( const RigidBodyInitArgs& args_ )
    {
        BodyBase::initialize( args_.Shape );
        mBtRigidBody = args_.RigidBody;
        mDynamicsWorld->addRigidBody( mBtRigidBody, args_.Group, args_.Mask );
    }

    //---------------------------------------------------------------------
	//
    //---------------------------------------------------------------------
    void RigidBody::setRestitution( float value_ ) { return mBtRigidBody->setRestitution( value_ ); }

    //---------------------------------------------------------------------
	//
    //---------------------------------------------------------------------
    float RigidBody::getRestitution() const { return mBtRigidBody->getRestitution(); }

    //---------------------------------------------------------------------
	//
    //---------------------------------------------------------------------
    void RigidBody::setFriction( float value_ ) { mBtRigidBody->setFriction( value_ ); }

    //---------------------------------------------------------------------
	//
    //---------------------------------------------------------------------
    float RigidBody::getFriction() const { return mBtRigidBody->getFriction(); }

    //---------------------------------------------------------------------
	// ● シミュレーション更新直前の処理
    //---------------------------------------------------------------------
    void RigidBody::preUpdate()
    {
    }

    //---------------------------------------------------------------------
	// ● シミュレーション更新直後の処理
    //---------------------------------------------------------------------
    void RigidBody::postUpdate()
    {
        /*
        btTransform t;
        mBtRigidBody->getMotionState()->getWorldTransform( t );

        const btMatrix3x3& r = t.getBasis();//mBtRigidBody->getCenterOfMassTransform().getBasis();
        const btVector3&   p = t.getOrigin();//mBtRigidBody->getCenterOfMassTransform().getOrigin();
        */

        const btMatrix3x3& r = mBtRigidBody->getWorldTransform().getBasis();
        const btVector3&   p = mBtRigidBody->getWorldTransform().getOrigin();
	    mWorldMatrix.set(
		    r[0].x(), r[1].x(), r[2].x(), 0.0f,
		    r[0].y(), r[1].y(), r[2].y(), 0.0f,
		    r[0].z(), r[1].z(), r[2].z(), 0.0f,
		    p.x(),   p.y(),    p.z(),    1.0f );
    }

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace Physics
} // namespace Core
} // namespace LNote

//=============================================================================
//								end of file
//=============================================================================