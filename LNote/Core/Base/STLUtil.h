//=============================================================================
//Åy STLUtil Åz
//-----------------------------------------------------------------------------
///**
//  @file       STLUtil.h
//  @brief      STLUtil
//  @author     Riki
//*/
//=============================================================================

#pragma once

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include <vector>
#include <algorithm>

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{
namespace Core
{
namespace Base
{

//=============================================================================
// Å° STLUtil ÉNÉâÉX
//-----------------------------------------------------------------------------
///**
// @brief       
//*/
//=============================================================================
class STLUtil
{
public:

    //---------------------------------------------------------------------
	///**
    //  @brief      vector Ç©ÇÁìôÇµÇ¢óvëfÇÇ∑Ç◊ÇƒçÌèúÇ∑ÇÈ
    //*/
    //---------------------------------------------------------------------
    template < class VTYPE_, class TYPE_ > static bool remove( VTYPE_& vector_, const TYPE_& v_ )
    {
        size_t n = vector_.size();
        vector_.erase( std::remove( vector_.begin(), vector_.end(), v_ ), vector_.end() );
        return n != vector_.size();
    }

    //---------------------------------------------------------------------
	///**
    //  @brief      vector Ç©ÇÁèåèÇ∆ìôÇµÇ¢óvëfÇÇ∑Ç◊ÇƒçÌèúÇ∑ÇÈ
    //*/
    //---------------------------------------------------------------------
    template < class VTYPE_,class PR_ > static void remove_if( VTYPE_& vector_, const PR_& pred_ )
    {
        vector_.erase( std::remove_if( vector_.begin(), vector_.end(), pred_ ), vector_.end() );
    }

};


//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace Base
} // namespace Core
} // namespace LNote

//=============================================================================
//								end of file
//=============================================================================