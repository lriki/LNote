//=============================================================================
//【 Sprite3DEmitter 】
//=============================================================================

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "stdafx.h"
#include "../../Graphics/Common/SpriteRenderer.h"
#include "../../Graphics/Manager.h"
#include "../Manager.h"
#include "../Core/EffectCore.h"
#include "Sprite3DEmitter.h"

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{
namespace Core
{
namespace Effect
{

#if 0

//=============================================================================
// ■ Sprite3DEmitterCore クラス
//=============================================================================

    //---------------------------------------------------------------------
	//
    //---------------------------------------------------------------------
    Sprite3DEmitterCore::Sprite3DEmitterCore( Manager* manager_ )
        : EmitterCoreBase   ()
        , mSprite3DRenderer ( manager_->getSprite3DRenderer() )
    {
        mSize.set( 1, 1 );
        mCenter = LVector3::ZERO;
        mSrcRect.set( 0, 0, 32, 32 );
        printf( "Sprite3DEmitterCore サンプラステート" );
        //mSamplerState;
        mBillboardType = LN_BILLBOARD_NOT;
    }

    //---------------------------------------------------------------------
	//
    //---------------------------------------------------------------------
    Sprite3DEmitterCore::~Sprite3DEmitterCore()
    {
        //LN_SAFE_RELEASE( mTexture );
    }

    //---------------------------------------------------------------------
	//
    //---------------------------------------------------------------------
    EmitterInstanceBase* Sprite3DEmitterCore::createInstance()
    {
        Sprite3DEmitterInstance* e = LN_NEW Sprite3DEmitterInstance( this );
        e->refresh();
        return e;
    }


//=============================================================================
// ■ Sprite3DEmitterInstance クラス
//=============================================================================

    //---------------------------------------------------------------------
	//
    //---------------------------------------------------------------------
    Sprite3DEmitterInstance::Sprite3DEmitterInstance( Sprite3DEmitterCore* core_ )
        : mEmitterCore  ( core_ )
        , mTexture      ( NULL )
    {
    }

    //---------------------------------------------------------------------
	//
    //---------------------------------------------------------------------
    void Sprite3DEmitterInstance::refresh()
    {
        
    }

    //---------------------------------------------------------------------
	//
    //---------------------------------------------------------------------
    void Sprite3DEmitterInstance::draw( const LMatrix& world_mat_ )
    {
        mEmitterCore->getSprite3DRenderer()->setTransform( world_mat_ );
        mEmitterCore->getSprite3DRenderer()->drawRequest3D(
            LVector3::ZERO,
            mEmitterCore->getCenter(),
            mEmitterCore->getSize(),
            mTexture,
            mEmitterCore->getSrcRect(),
            NULL,
            LN_AADIR_RZ );
    }

#endif

#if 0
//=============================================================================
// ■ Sprite3DEmitter クラス
//=============================================================================

    //---------------------------------------------------------------------
	//
    //---------------------------------------------------------------------
    Sprite3DEmitter::Sprite3DEmitter( EffectNode* node_ )
        : EmitterBase       ( node_ )
        , mSprite3DRenderer ( node_->getEffectCore()->getManager()->getSprite3DRenderer() )
        , mTexture          ( NULL )
    {
    }

    //---------------------------------------------------------------------
	//
    //---------------------------------------------------------------------
    Sprite3DEmitter::~Sprite3DEmitter()
    {
        LN_SAFE_RELEASE( mTexture );
    }

    //---------------------------------------------------------------------
	//
    //---------------------------------------------------------------------
    EmitterSubsetBase* Sprite3DEmitter::createSubset()
    {
        return LN_NEW Sprite3DEmitterSubset( this );
    }

    //---------------------------------------------------------------------
	//
    //---------------------------------------------------------------------
    void Sprite3DEmitter::draw()
    {
        EmitterBase::draw();
    }


//=============================================================================
// ■ Sprite3DEmitterSubset クラス
//=============================================================================

    //---------------------------------------------------------------------
	//
    //---------------------------------------------------------------------
    Sprite3DEmitterSubset::Sprite3DEmitterSubset( Sprite3DEmitter* parent_emitter_ )
        : mEmitter  ( parent_emitter_ )
    {
    }

    //---------------------------------------------------------------------
	//
    //---------------------------------------------------------------------
    void Sprite3DEmitterSubset::draw()
    {
        _p("draw");
    }
   
#endif

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace Effect
} // namespace Core
} // namespace LNote

//=============================================================================
//								end of file
//=============================================================================