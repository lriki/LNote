//=============================================================================
//【 Semaphore 】
//-----------------------------------------------------------------------------
///**
//  @file       Semaphore.h
//  @brief      Semaphore
//  @author     Riki
//*/
//=============================================================================

#pragma once

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{
namespace Core
{
namespace Thread
{

//=============================================================================
// ■ Semaphore クラス
//-----------------------------------------------------------------------------
///**
//  @brief      セマフォのクラス
//*/
//=============================================================================
class Semaphore
    : public Base::ReferenceObject
{
public:

    //---------------------------------------------------------------------
    ///**
    //  @brief      コンストラクタ
    // 
    //  @param[in]  start_count_ : 初期のカウント
    //  @param[in]  max_count_   : セマフォを取得できる最大数
    // */
    //---------------------------------------------------------------------
    Semaphore( int start_count_, int max_count_ );

    /// デストラクタ
    ~Semaphore();

public:

    //---------------------------------------------------------------------
    ///**
    //  @brief      ロック
    //
    //  @par
    //              カウントをひとつ減らします。
    //              この関数を呼んだ時にすでにカウントが 0 だった場合は待機します。
    //*/
    //---------------------------------------------------------------------
    void decrease();

    //---------------------------------------------------------------------
    ///**
    //  @brief      アンロック
    //*/
    //---------------------------------------------------------------------
    void increase();

#if defined(LNOTE_WINDOWS)
    /// タイムアウト実装版 (true:取得できた)
    bool decrease( lnU32 ms_ );
#endif

private:

#if defined(LNOTE_WINDOWS)
	HANDLE	mHandle;
	int		mMaxCount;
#else
    int             mValue;
    int             mMaxCount;
    pthread_mutex_t mMutex;
    pthread_cond_t  mCondition;
    
#endif
};

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace Thread
} // namespace Core
} // namespace LNote

//=============================================================================
//								end of file
//=============================================================================