//=============================================================================
//【 Atomic 】
//-----------------------------------------------------------------------------
///**
//  @file       Atomic.h
//  @brief      Atomic
//  @author     Riki
//*/
//=============================================================================

#pragma once

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------


//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{
namespace Core
{
namespace Thread
{

//=============================================================================
// ■ Atomic クラス
//-----------------------------------------------------------------------------
///**
//  @brief     スレッドセーフな整数変数のクラス
// */
//=============================================================================
class Atomic
    : private Base::NonCopyable    // 今のところ NonCopyable
{
public:
    
    //---------------------------------------------------------------------
    ///**
    //  @brief      コンストラクタ
    // 
    //  @param[in]  value_ : 初期値
    //*/
    //---------------------------------------------------------------------
	Atomic( lnS32 value_ = 0 );

	/// デストラクタ
	~Atomic();

public:

    //---------------------------------------------------------------------
    ///**
    //  @brief      値を取得する
    //*/
    //---------------------------------------------------------------------
	lnS32 get();

    //---------------------------------------------------------------------
    ///**
    //  @brief      値を設定する
    //*/
    //---------------------------------------------------------------------
    void set( lnS32 value_ );

    //---------------------------------------------------------------------
    ///**
    //  @brief      値をインクリメントする
    //
    //  @return     インクリメント後の値
    //*/
    //---------------------------------------------------------------------
    lnS32 increment();

    //---------------------------------------------------------------------
    ///**
    //  @brief      値をデクリメントする
    //
    //  @return     デクリメント後の値
    //*/
    //---------------------------------------------------------------------
    lnS32 decrement();

private:

    volatile lnS32    mValue;
    
#if defined(LNOTE_GNUC)
    pthread_mutex_t mMutex;
#endif

};

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace Thread
} // namespace Core
} // namespace LNote

//=============================================================================
//								end of file
//=============================================================================