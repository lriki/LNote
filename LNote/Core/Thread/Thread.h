//=============================================================================
//【 Thread 】
//-----------------------------------------------------------------------------
///**
//  @file       Thread.h
//  @brief      Thread
//  @author     Riki
//*/
//=============================================================================

#pragma once

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------


//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{
namespace Core
{
namespace Thread
{
class EventFlag;
class _thr_prx;


//=============================================================================
// ■ ThreadObject クラス
//-----------------------------------------------------------------------------
///**
//  @brief      スレッドの基底クラス
//
//  @par
//              ◆ 使い方       <br>
//              <br>
//                  準備<br>
//                  １．スレッド関数を持たせたいクラスに ThreadObject を継承させる ( class Test : public ThreadObject { ... } )<br>
//                  ２．int operator()() を実装する<br>
//              <br>
//                  実際に使う<br>
//                  １．「準備」で定義したクラスのインスタンスを作る ( Test t; )<br>
//                  ２．start() を呼ぶ ( t.start(); )<br>
//              <br>
//              <br>
//              通常、このクラスを解放する前 ( デストラクタが呼ばれる前 ) には
//              wait() を呼んでスレッドの終了を待機してください。
//
//	@warning
//              start() を呼んだあとすぐにデストラクタが呼ばれた場合、
//              まれに「仮想関数の呼び出しでエラーが発生しました」
//              という感じのエラーが出ます。<br>
//              (原因は、スレッドが実際に始まる時点でインスタンスが消滅してるから)<br>
//              今のところデストラクタの直前で wait() を呼び出しておけば防げます。
//
//  @note
//              今のところデストラクタで wait() 呼んで待機してるけど、
//              もしかしたら 強制的に CloseHandle() とかで終了させる方が
//              自然なのかもしれない。
//*/
//=============================================================================
class ThreadObject
    : private Base::NonCopyable
{
public:

    /// コンストラクタ
    ThreadObject();

    /// デストラクタ
    virtual ~ThreadObject();

public:

    //---------------------------------------------------------------------
    ///**
    //  @brief      スレッド関数 (これを自身で実装する)
    //*/
    //---------------------------------------------------------------------
	virtual void run() = 0;

    //---------------------------------------------------------------------
    ///**
    //  @brief      実行開始
    //*/
    //---------------------------------------------------------------------
	void start();

    //---------------------------------------------------------------------
    ///**
    //  @brief      終了待ち
    //*/
    //---------------------------------------------------------------------
	void wait();

    //---------------------------------------------------------------------
    ///**
    //  @brief      終了しているかどうかの判定
    //*/
    //---------------------------------------------------------------------
	bool isFinished();

    /// スレッド識別子の取得 (start() 後に呼ぶこと)
    long getThreadID() const;

//
//#if defined(LNOTE_WINDOWS)
//    
//    
//
//    /// スレッドハンドルの取得 (start() 後に呼ぶこと)
//    HANDLE getThreadHandle() const { return mThread; }
//    
//#endif
    
private:

    EventFlag*   mFinished;
    
#if defined(LNOTE_WINDOWS)
    HANDLE      mThread;
    DWORD       mThreadID;
#else
    pthread_t  mThread;
#endif

    friend class _thr_prx;
};

//---------------------------------------------------------------------
///**
//  @brief      時間待ち
//*/
//---------------------------------------------------------------------
void sleep( int ms_ );

//---------------------------------------------------------------------
///**
//  @brief      呼び出し側スレッドのスレッド識別子の取得
//*/
//---------------------------------------------------------------------
long getCurrentThreadID();

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace Thread
} // namespace Core

} // namespace LNote

//=============================================================================
//								end of file
//=============================================================================