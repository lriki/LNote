//=============================================================================
//【 Mutex 】
//=============================================================================

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "stdafx.h"
#include "Mutex.h"

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{
namespace Core
{
namespace Thread
{

//=============================================================================
// ■ Mutex クラス (win32)
//=============================================================================
#if defined(LNOTE_WINDOWS)
    
	//---------------------------------------------------------------------
	// ● コンストラクタ
	//---------------------------------------------------------------------
	Mutex::Mutex()
	{
        //::InitializeCriticalSection( &mCriticalSection );
		mHandle = ::CreateSemaphore( NULL, 1, 1, NULL );
	}

	//---------------------------------------------------------------------
	// ● デストラクタ
	//---------------------------------------------------------------------
	Mutex::~Mutex()
	{
		//::DeleteCriticalSection( &mCriticalSection );
		if ( mHandle )
		{
			::CloseHandle( mHandle );
		}
	}

	//---------------------------------------------------------------------
	// ● ロック
	//---------------------------------------------------------------------
	void Mutex::lock()
	{
		//::EnterCriticalSection( &mCriticalSection );
		if ( mHandle )
		{
#if LNOTE_ENABLE_THREAD_DEBUG
			if (::WaitForSingleObject( mHandle, 10000 ) != WAIT_OBJECT_0)
			{
				printf("Mutex::lock() timeout");
				*reinterpret_cast< int* >( 0 ) = 0;
			}
#else
			::WaitForSingleObject( mHandle, INFINITE );
#endif
		}
	}

	//---------------------------------------------------------------------
	// ● アンロック
	//---------------------------------------------------------------------
	void Mutex::unlock()
	{
		//::LeaveCriticalSection( &mCriticalSection );
		if ( mHandle )
		{
			LONG prev;
			::ReleaseSemaphore( mHandle, 1, &prev );

			//LN_ASSERT_S_EXP_( ( prev != 0 ), LNException::Thread, "< Core::Thread::Mutex::unlock >\n\nReleaseSemaphore\nunlock() が複数回呼ばれた可能性があります。" );
		}
	}

//=============================================================================
// ■ Mutex クラス (pthread)
//=============================================================================
#else
    
    //---------------------------------------------------------------------
    // ● コンストラクタ
    //---------------------------------------------------------------------
    Mutex::Mutex()
    {
        pthread_mutex_init( &mMutex, 0 );
    }

    //---------------------------------------------------------------------
    // ● デストラクタ
    //---------------------------------------------------------------------
    Mutex::~Mutex()
    {
        pthread_mutex_destroy( &mMutex );
    }

    //---------------------------------------------------------------------
    // ● ロック
    //---------------------------------------------------------------------
    void Mutex::lock()
    {
        pthread_mutex_lock( &mMutex );
    }

    //---------------------------------------------------------------------
    // ● アンロック
    //---------------------------------------------------------------------
    void Mutex::unlock()
    {
        pthread_mutex_unlock( &mMutex );
    }
    
#endif

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace Thread
} // namespace Core
} // namespace LNote

//=============================================================================
//								end of file
//=============================================================================